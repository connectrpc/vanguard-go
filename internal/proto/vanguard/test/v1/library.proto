// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package vanguard.test.v1;

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

service LibraryService {
  // Gets a book.
  rpc GetBook(GetBookRequest) returns (Book) {
    option (google.api.http) = {get: "/v1/{name=shelves/*/books/*}"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  // Creates a book, and returns the new Book.
  rpc CreateBook(CreateBookRequest) returns (Book) {
    option (google.api.http) = {
      post: "/v1/{parent=shelves/*}/books"
      body: "book"
    };
  }
  // Lists books in a shelf.
  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse) {
    // List method maps to HTTP GET.
    option (google.api.http) = {
      // The `parent` captures the parent resource name, such as
      // "shelves/shelf1".
      get: "/v1/{parent=shelves/*}/books"
    };
  }
  // Creates a shelf.
  rpc CreateShelf(CreateShelfRequest) returns (Shelf) {
    option (google.api.http) = {
      post: "/v1/shelves"
      body: "shelf"
    };
  }
  // Lists shelves.
  rpc ListShelves(ListShelvesRequest) returns (ListShelvesResponse) {
    // List method maps to HTTP GET.
    option (google.api.http) = {
      get: "/v1/shelves"
    };
  }
  // Updates a book.
  rpc UpdateBook(UpdateBookRequest) returns (Book) {
    // Update maps to HTTP PATCH. Resource name is mapped to a URL path.
    // Resource is contained in the HTTP request body.
    option (google.api.http) = {
      // Note the URL template variable which captures the resource name of the
      // book to update.
      patch: "/v1/{book.name=shelves/*/books/*}"
      body: "book"
    };
  }
  // Deletes a book.
  rpc DeleteBook(DeleteBookRequest) returns (google.protobuf.Empty) {
    // Delete maps to HTTP DELETE. Resource name maps to the URL path.
    // There is no request body.
    option (google.api.http) = {
      // Note the URL template variable capturing the multi-segment name of the
      // book resource to be deleted, such as "shelves/shelf1/books/book2"
      delete: "/v1/{name=shelves/*/books/*}"
    };
  }
  // Search books in a shelf.
  rpc SearchBooks(SearchBooksRequest) returns (SearchBooksResponse) {
    // Search over a multiple shelves with "shelves/-" wildcard.
    option (google.api.http) = {get: "/v2/{parent=shelves/*}/books:search"};
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc MoveBooks(MoveBooksRequest) returns (MoveBooksResponse) {
    option (google.api.http) = {
      post: "/v2/{new_parent=shelves/*}/books:move"
      body: "books"
    };
  }
  rpc CheckoutBooks(CheckoutBooksRequest) returns (Checkout) {
    option (google.api.http) = {
      post: "/v2/checkouts"
      body: "book_names"
    };
  }
  rpc ReturnBooks(ReturnBooksRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put: "/v2/checkouts/{id}"
      body:"*"
    };
  }
  rpc GetCheckout(GetCheckoutRequest) returns (Checkout) {
    option (google.api.http) = {
      get: "/v2/checkouts/{id}"
      response_body: "books"
    };
    option idempotency_level = NO_SIDE_EFFECTS;
  }
  rpc ListCheckouts(ListCheckoutsRequest) returns (ListCheckoutsResponse) {
    option (google.api.http) = {
      get: "/v2/{name=shelves/*/books/*}:checkouts"
      response_body: "checkouts"
    };
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message Book {
  // Resource name of the book. It must have the format of "shelves/*/books/*".
  // For example: "shelves/shelf1/books/book2".
  string name = 1;
  string parent = 2;
  google.protobuf.Timestamp create_time = 3;
  google.protobuf.Timestamp update_time = 4;
  // The title of the book.
  string title = 5;
  // The name of the author.
  string author = 6;
  // The description of the book.
  string description = 7;
  // Resource labels to represent user provided metadata.
  map<string, string> labels = 8;
}

message GetBookRequest {
  // Resource name of a book. For example: "shelves/shelf1/books/book2".
  string name = 1;
}

message CreateBookRequest {
  // Resource name of the parent resource where to create the book.
  // For example: "shelves/shelf1".
  string parent = 1;
  // The book id to use for this book.
  string book_id = 3;
  // The Book resource to be created. Client must not set the `Book.name` field.
  Book book = 2;
  // A unique request ID for server to detect duplicated requests.
  string request_id = 4;
}

message ListBooksRequest {
  // The parent resource name, for example, "shelves/shelf1".
  string parent = 1;

  // The maximum number of items to return.
  int32 page_size = 2;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 3;
}

message ListBooksResponse {
  // The field name should match the noun "books" in the method name.  There
  // will be a maximum number of items returned based on the page_size field
  // in the request.
  repeated Book books = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message Shelf {}

message CreateShelfRequest {
  Shelf shelf = 1;
}

message ListShelvesRequest {
  // The maximum number of items to return.
  int32 page_size = 1;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 2;
}

message ListShelvesResponse {
  // The list of shelves.
  repeated Shelf shelves = 1;
  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}
message UpdateBookRequest {
  // The book resource which replaces the resource on the server.
  Book book = 1;

  // The update mask applies to the resource. For the `FieldMask` definition,
  // see
  // https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask
  google.protobuf.FieldMask update_mask = 2;
}

message DeleteBookRequest {
  // The resource name of the book to be deleted, for example:
  // "shelves/shelf1/books/book2"
  string name = 1;
}

message SearchBooksRequest {
  // The parent resource name, for example, "shelves/shelf1".
  string parent = 1;

  // The query string in search query syntax.
  string query = 2;

  // The maximum number of items to return.
  int32 page_size = 3;

  // The next_page_token value returned from a previous List request, if any.
  string page_token = 4;
}

message SearchBooksResponse {
  // The field name should match the noun "books" in the method name.  There
  // will be a maximum number of items returned based on the page_size field
  // in the request.
  repeated Book books = 1;

  // Token to retrieve the next page of results, or empty if there are no
  // more results in the list.
  string next_page_token = 2;
}

message MoveBooksRequest {
  string new_parent = 1;
  repeated string books = 2;
}

message MoveBooksResponse {
}

message Checkout {
  uint64 id = 1;
  repeated Book books = 2;
}

message CheckoutBooksRequest {
  repeated string book_names = 2;
}

message GetCheckoutRequest {
  uint64 id = 1;
}

message ReturnBooksRequest {
  uint64 id = 1;
  repeated string book_names = 2;
}

message ListCheckoutsRequest {
  string name = 1;
}

message ListCheckoutsResponse {
  repeated Checkout checkouts = 1;
}
