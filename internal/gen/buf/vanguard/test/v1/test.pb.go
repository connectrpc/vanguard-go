// Copyright 2023 Buf Technologies, Inc.
//
// All rights reserved.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: buf/vanguard/test/v1/test.proto

package testv1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enum types
type ParameterValues_Enum int32

const (
	ParameterValues_ENUM_UNSPECIFIED ParameterValues_Enum = 0
	ParameterValues_ENUM_VALUE       ParameterValues_Enum = 1
)

// Enum value maps for ParameterValues_Enum.
var (
	ParameterValues_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ParameterValues_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ParameterValues_Enum) Enum() *ParameterValues_Enum {
	p := new(ParameterValues_Enum)
	*p = x
	return p
}

func (x ParameterValues_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterValues_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_vanguard_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (ParameterValues_Enum) Type() protoreflect.EnumType {
	return &file_buf_vanguard_test_v1_test_proto_enumTypes[0]
}

func (x ParameterValues_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterValues_Enum.Descriptor instead.
func (ParameterValues_Enum) EnumDescriptor() ([]byte, []int) {
	return file_buf_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0}
}

type ParameterValues_Nested_Enum int32

const (
	ParameterValues_Nested_ENUM_UNSPECIFIED ParameterValues_Nested_Enum = 0
	ParameterValues_Nested_ENUM_VALUE       ParameterValues_Nested_Enum = 1
)

// Enum value maps for ParameterValues_Nested_Enum.
var (
	ParameterValues_Nested_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ParameterValues_Nested_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ParameterValues_Nested_Enum) Enum() *ParameterValues_Nested_Enum {
	p := new(ParameterValues_Nested_Enum)
	*p = x
	return p
}

func (x ParameterValues_Nested_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterValues_Nested_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_buf_vanguard_test_v1_test_proto_enumTypes[1].Descriptor()
}

func (ParameterValues_Nested_Enum) Type() protoreflect.EnumType {
	return &file_buf_vanguard_test_v1_test_proto_enumTypes[1]
}

func (x ParameterValues_Nested_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterValues_Nested_Enum.Descriptor instead.
func (ParameterValues_Nested_Enum) EnumDescriptor() ([]byte, []int) {
	return file_buf_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0, 0}
}

type ParameterValues struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// scalar types
	DoubleValue   float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue    float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue     bool    `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string  `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue    []byte  `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	// scalar wrappers
	Timestamp          *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration           *durationpb.Duration    `protobuf:"bytes,17,opt,name=duration,proto3" json:"duration,omitempty"`
	BoolValueWrapper   *wrapperspb.BoolValue   `protobuf:"bytes,18,opt,name=bool_value_wrapper,json=boolValueWrapper,proto3" json:"bool_value_wrapper,omitempty"`
	Int32ValueWrapper  *wrapperspb.Int32Value  `protobuf:"bytes,19,opt,name=int32_value_wrapper,json=int32ValueWrapper,proto3" json:"int32_value_wrapper,omitempty"`
	Int64ValueWrapper  *wrapperspb.Int64Value  `protobuf:"bytes,20,opt,name=int64_value_wrapper,json=int64ValueWrapper,proto3" json:"int64_value_wrapper,omitempty"`
	Uint32ValueWrapper *wrapperspb.UInt32Value `protobuf:"bytes,21,opt,name=uint32_value_wrapper,json=uint32ValueWrapper,proto3" json:"uint32_value_wrapper,omitempty"`
	Uint64ValueWrapper *wrapperspb.UInt64Value `protobuf:"bytes,22,opt,name=uint64_value_wrapper,json=uint64ValueWrapper,proto3" json:"uint64_value_wrapper,omitempty"`
	FloatValueWrapper  *wrapperspb.FloatValue  `protobuf:"bytes,23,opt,name=float_value_wrapper,json=floatValueWrapper,proto3" json:"float_value_wrapper,omitempty"`
	DoubleValueWrapper *wrapperspb.DoubleValue `protobuf:"bytes,24,opt,name=double_value_wrapper,json=doubleValueWrapper,proto3" json:"double_value_wrapper,omitempty"`
	BytesValueWrapper  *wrapperspb.BytesValue  `protobuf:"bytes,25,opt,name=bytes_value_wrapper,json=bytesValueWrapper,proto3" json:"bytes_value_wrapper,omitempty"`
	StringValueWrapper *wrapperspb.StringValue `protobuf:"bytes,26,opt,name=string_value_wrapper,json=stringValueWrapper,proto3" json:"string_value_wrapper,omitempty"`
	FieldMask          *fieldmaskpb.FieldMask  `protobuf:"bytes,27,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	EnumValue          ParameterValues_Enum    `protobuf:"varint,28,opt,name=enum_value,json=enumValue,proto3,enum=buf.vanguard.test.v1.ParameterValues_Enum" json:"enum_value,omitempty"`
	// complex types
	EnumList        []ParameterValues_Enum    `protobuf:"varint,29,rep,packed,name=enum_list,json=enumList,proto3,enum=buf.vanguard.test.v1.ParameterValues_Enum" json:"enum_list,omitempty"`
	DoubleList      []float64                 `protobuf:"fixed64,30,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	DoubleValueList []*wrapperspb.DoubleValue `protobuf:"bytes,31,rep,name=double_value_list,json=doubleValueList,proto3" json:"double_value_list,omitempty"`
	// Types that are assignable to Oneof:
	//
	//	*ParameterValues_OneofDoubleValue
	//	*ParameterValues_OneofDoubleValueWrapper
	//	*ParameterValues_OneofEnumValue
	Oneof     isParameterValues_Oneof `protobuf_oneof:"oneof"`
	Nested    *ParameterValues_Nested `protobuf:"bytes,36,opt,name=nested,proto3" json:"nested,omitempty"`
	Recursive *ParameterValues        `protobuf:"bytes,37,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// unsupported
	StringMap      map[string]string                  `protobuf:"bytes,38,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StringValueMap map[string]*wrapperspb.StringValue `protobuf:"bytes,39,rep,name=string_value_map,json=stringValueMap,proto3" json:"string_value_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EnumMap        map[string]ParameterValues_Enum    `protobuf:"bytes,40,rep,name=enum_map,json=enumMap,proto3" json:"enum_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3,enum=buf.vanguard.test.v1.ParameterValues_Enum"`
	NestedMap      map[string]*ParameterValues_Nested `protobuf:"bytes,41,rep,name=nested_map,json=nestedMap,proto3" json:"nested_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StructValue    *structpb.Struct                   `protobuf:"bytes,42,opt,name=struct_value,json=structValue,proto3" json:"struct_value,omitempty"`
}

func (x *ParameterValues) Reset() {
	*x = ParameterValues{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_vanguard_test_v1_test_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValues) ProtoMessage() {}

func (x *ParameterValues) ProtoReflect() protoreflect.Message {
	mi := &file_buf_vanguard_test_v1_test_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValues.ProtoReflect.Descriptor instead.
func (*ParameterValues) Descriptor() ([]byte, []int) {
	return file_buf_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *ParameterValues) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ParameterValues) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ParameterValues) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ParameterValues) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ParameterValues) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ParameterValues) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ParameterValues) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *ParameterValues) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *ParameterValues) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *ParameterValues) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *ParameterValues) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *ParameterValues) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *ParameterValues) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ParameterValues) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ParameterValues) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ParameterValues) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ParameterValues) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ParameterValues) GetBoolValueWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetInt32ValueWrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetInt64ValueWrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetUint32ValueWrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetUint64ValueWrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetFloatValueWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetBytesValueWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetStringValueWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ParameterValues) GetEnumValue() ParameterValues_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ParameterValues_ENUM_UNSPECIFIED
}

func (x *ParameterValues) GetEnumList() []ParameterValues_Enum {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *ParameterValues) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *ParameterValues) GetDoubleValueList() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueList
	}
	return nil
}

func (m *ParameterValues) GetOneof() isParameterValues_Oneof {
	if m != nil {
		return m.Oneof
	}
	return nil
}

func (x *ParameterValues) GetOneofDoubleValue() float64 {
	if x, ok := x.GetOneof().(*ParameterValues_OneofDoubleValue); ok {
		return x.OneofDoubleValue
	}
	return 0
}

func (x *ParameterValues) GetOneofDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x, ok := x.GetOneof().(*ParameterValues_OneofDoubleValueWrapper); ok {
		return x.OneofDoubleValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetOneofEnumValue() ParameterValues_Enum {
	if x, ok := x.GetOneof().(*ParameterValues_OneofEnumValue); ok {
		return x.OneofEnumValue
	}
	return ParameterValues_ENUM_UNSPECIFIED
}

func (x *ParameterValues) GetNested() *ParameterValues_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *ParameterValues) GetRecursive() *ParameterValues {
	if x != nil {
		return x.Recursive
	}
	return nil
}

func (x *ParameterValues) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *ParameterValues) GetStringValueMap() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.StringValueMap
	}
	return nil
}

func (x *ParameterValues) GetEnumMap() map[string]ParameterValues_Enum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

func (x *ParameterValues) GetNestedMap() map[string]*ParameterValues_Nested {
	if x != nil {
		return x.NestedMap
	}
	return nil
}

func (x *ParameterValues) GetStructValue() *structpb.Struct {
	if x != nil {
		return x.StructValue
	}
	return nil
}

type isParameterValues_Oneof interface {
	isParameterValues_Oneof()
}

type ParameterValues_OneofDoubleValue struct {
	OneofDoubleValue float64 `protobuf:"fixed64,33,opt,name=oneof_double_value,json=oneofDoubleValue,proto3,oneof"`
}

type ParameterValues_OneofDoubleValueWrapper struct {
	OneofDoubleValueWrapper *wrapperspb.DoubleValue `protobuf:"bytes,34,opt,name=oneof_double_value_wrapper,json=oneofDoubleValueWrapper,proto3,oneof"`
}

type ParameterValues_OneofEnumValue struct {
	OneofEnumValue ParameterValues_Enum `protobuf:"varint,35,opt,name=oneof_enum_value,json=oneofEnumValue,proto3,enum=buf.vanguard.test.v1.ParameterValues_Enum,oneof"`
}

func (*ParameterValues_OneofDoubleValue) isParameterValues_Oneof() {}

func (*ParameterValues_OneofDoubleValueWrapper) isParameterValues_Oneof() {}

func (*ParameterValues_OneofEnumValue) isParameterValues_Oneof() {}

type ParameterValues_Nested struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DoubleValue        float64                     `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	DoubleValueWrapper *wrapperspb.DoubleValue     `protobuf:"bytes,2,opt,name=double_value_wrapper,json=doubleValueWrapper,proto3" json:"double_value_wrapper,omitempty"`
	EnumValue          ParameterValues_Nested_Enum `protobuf:"varint,3,opt,name=enum_value,json=enumValue,proto3,enum=buf.vanguard.test.v1.ParameterValues_Nested_Enum" json:"enum_value,omitempty"`
}

func (x *ParameterValues_Nested) Reset() {
	*x = ParameterValues_Nested{}
	if protoimpl.UnsafeEnabled {
		mi := &file_buf_vanguard_test_v1_test_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParameterValues_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValues_Nested) ProtoMessage() {}

func (x *ParameterValues_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_buf_vanguard_test_v1_test_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValues_Nested.ProtoReflect.Descriptor instead.
func (*ParameterValues_Nested) Descriptor() ([]byte, []int) {
	return file_buf_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ParameterValues_Nested) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ParameterValues_Nested) GetDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueWrapper
	}
	return nil
}

func (x *ParameterValues_Nested) GetEnumValue() ParameterValues_Nested_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ParameterValues_Nested_ENUM_UNSPECIFIED
}

var File_buf_vanguard_test_v1_test_proto protoreflect.FileDescriptor

var file_buf_vanguard_test_v1_test_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2f, 0x74,
	0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x14, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e,
	0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x18, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0a, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0b, 0x73, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0b, 0x73, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0d, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0d, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x0d, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35,
	0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x12, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x62,
	0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12,
	0x4b, 0x0a, 0x13, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x11, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x13, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x11, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x12, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73,
	0x6b, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d,
	0x61, 0x73, 0x6b, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x49,
	0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09,
	0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x6e, 0x75,
	0x6d, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x01, 0x52, 0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x11, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2e, 0x0a,
	0x12, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x10, 0x6f, 0x6e, 0x65,
	0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x5b, 0x0a,
	0x1a, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x10, 0x6f, 0x6e,
	0x65, 0x6f, 0x66, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x48, 0x00, 0x52, 0x0e, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x45, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x44, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x75,
	0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x62, 0x75,
	0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x52, 0x09, 0x72, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x53, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x26, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64,
	0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x12, 0x63, 0x0a, 0x10, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62,
	0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x4d, 0x0a, 0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65,
	0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x12, 0x53, 0x0a, 0x0a, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x29, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x66,
	0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x09, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x12, 0x3a, 0x0a, 0x0c, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfb, 0x01, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74,
	0x65, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x14, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x12, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x57, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x12, 0x50, 0x0a, 0x0a, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e, 0x62, 0x75, 0x66, 0x2e,
	0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x65, 0x6e,
	0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x10, 0x01, 0x1a, 0x3c, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0x5f, 0x0a, 0x13, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x66, 0x0a, 0x0c, 0x45, 0x6e, 0x75, 0x6d, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x6a, 0x0a, 0x0e,
	0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x42, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x74,
	0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2c, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x14, 0x0a, 0x10, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x4e, 0x55, 0x4d, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x10, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x6f, 0x66, 0x42,
	0xdf, 0x01, 0x0a, 0x18, 0x63, 0x6f, 0x6d, 0x2e, 0x62, 0x75, 0x66, 0x2e, 0x76, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x72, 0x64, 0x2e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x54, 0x65,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x75, 0x66, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x2f, 0x76,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x62, 0x75, 0x66, 0x2f, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72,
	0x64, 0x2f, 0x74, 0x65, 0x73, 0x74, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x65, 0x73, 0x74, 0x76, 0x31,
	0xa2, 0x02, 0x03, 0x42, 0x56, 0x54, 0xaa, 0x02, 0x14, 0x42, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x72, 0x64, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x14,
	0x42, 0x75, 0x66, 0x5c, 0x56, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x5c, 0x54, 0x65, 0x73,
	0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x20, 0x42, 0x75, 0x66, 0x5c, 0x56, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x72, 0x64, 0x5c, 0x54, 0x65, 0x73, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x17, 0x42, 0x75, 0x66, 0x3a, 0x3a, 0x56,
	0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x3a, 0x3a, 0x54, 0x65, 0x73, 0x74, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_buf_vanguard_test_v1_test_proto_rawDescOnce sync.Once
	file_buf_vanguard_test_v1_test_proto_rawDescData = file_buf_vanguard_test_v1_test_proto_rawDesc
)

func file_buf_vanguard_test_v1_test_proto_rawDescGZIP() []byte {
	file_buf_vanguard_test_v1_test_proto_rawDescOnce.Do(func() {
		file_buf_vanguard_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(file_buf_vanguard_test_v1_test_proto_rawDescData)
	})
	return file_buf_vanguard_test_v1_test_proto_rawDescData
}

var file_buf_vanguard_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_buf_vanguard_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_buf_vanguard_test_v1_test_proto_goTypes = []interface{}{
	(ParameterValues_Enum)(0),        // 0: buf.vanguard.test.v1.ParameterValues.Enum
	(ParameterValues_Nested_Enum)(0), // 1: buf.vanguard.test.v1.ParameterValues.Nested.Enum
	(*ParameterValues)(nil),          // 2: buf.vanguard.test.v1.ParameterValues
	(*ParameterValues_Nested)(nil),   // 3: buf.vanguard.test.v1.ParameterValues.Nested
	nil,                              // 4: buf.vanguard.test.v1.ParameterValues.StringMapEntry
	nil,                              // 5: buf.vanguard.test.v1.ParameterValues.StringValueMapEntry
	nil,                              // 6: buf.vanguard.test.v1.ParameterValues.EnumMapEntry
	nil,                              // 7: buf.vanguard.test.v1.ParameterValues.NestedMapEntry
	(*timestamppb.Timestamp)(nil),    // 8: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),      // 9: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),     // 10: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),    // 11: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),    // 12: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),   // 13: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),   // 14: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),    // 15: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),   // 16: google.protobuf.DoubleValue
	(*wrapperspb.BytesValue)(nil),    // 17: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil),   // 18: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),    // 19: google.protobuf.FieldMask
	(*structpb.Struct)(nil),          // 20: google.protobuf.Struct
}
var file_buf_vanguard_test_v1_test_proto_depIdxs = []int32{
	8,  // 0: buf.vanguard.test.v1.ParameterValues.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 1: buf.vanguard.test.v1.ParameterValues.duration:type_name -> google.protobuf.Duration
	10, // 2: buf.vanguard.test.v1.ParameterValues.bool_value_wrapper:type_name -> google.protobuf.BoolValue
	11, // 3: buf.vanguard.test.v1.ParameterValues.int32_value_wrapper:type_name -> google.protobuf.Int32Value
	12, // 4: buf.vanguard.test.v1.ParameterValues.int64_value_wrapper:type_name -> google.protobuf.Int64Value
	13, // 5: buf.vanguard.test.v1.ParameterValues.uint32_value_wrapper:type_name -> google.protobuf.UInt32Value
	14, // 6: buf.vanguard.test.v1.ParameterValues.uint64_value_wrapper:type_name -> google.protobuf.UInt64Value
	15, // 7: buf.vanguard.test.v1.ParameterValues.float_value_wrapper:type_name -> google.protobuf.FloatValue
	16, // 8: buf.vanguard.test.v1.ParameterValues.double_value_wrapper:type_name -> google.protobuf.DoubleValue
	17, // 9: buf.vanguard.test.v1.ParameterValues.bytes_value_wrapper:type_name -> google.protobuf.BytesValue
	18, // 10: buf.vanguard.test.v1.ParameterValues.string_value_wrapper:type_name -> google.protobuf.StringValue
	19, // 11: buf.vanguard.test.v1.ParameterValues.field_mask:type_name -> google.protobuf.FieldMask
	0,  // 12: buf.vanguard.test.v1.ParameterValues.enum_value:type_name -> buf.vanguard.test.v1.ParameterValues.Enum
	0,  // 13: buf.vanguard.test.v1.ParameterValues.enum_list:type_name -> buf.vanguard.test.v1.ParameterValues.Enum
	16, // 14: buf.vanguard.test.v1.ParameterValues.double_value_list:type_name -> google.protobuf.DoubleValue
	16, // 15: buf.vanguard.test.v1.ParameterValues.oneof_double_value_wrapper:type_name -> google.protobuf.DoubleValue
	0,  // 16: buf.vanguard.test.v1.ParameterValues.oneof_enum_value:type_name -> buf.vanguard.test.v1.ParameterValues.Enum
	3,  // 17: buf.vanguard.test.v1.ParameterValues.nested:type_name -> buf.vanguard.test.v1.ParameterValues.Nested
	2,  // 18: buf.vanguard.test.v1.ParameterValues.recursive:type_name -> buf.vanguard.test.v1.ParameterValues
	4,  // 19: buf.vanguard.test.v1.ParameterValues.string_map:type_name -> buf.vanguard.test.v1.ParameterValues.StringMapEntry
	5,  // 20: buf.vanguard.test.v1.ParameterValues.string_value_map:type_name -> buf.vanguard.test.v1.ParameterValues.StringValueMapEntry
	6,  // 21: buf.vanguard.test.v1.ParameterValues.enum_map:type_name -> buf.vanguard.test.v1.ParameterValues.EnumMapEntry
	7,  // 22: buf.vanguard.test.v1.ParameterValues.nested_map:type_name -> buf.vanguard.test.v1.ParameterValues.NestedMapEntry
	20, // 23: buf.vanguard.test.v1.ParameterValues.struct_value:type_name -> google.protobuf.Struct
	16, // 24: buf.vanguard.test.v1.ParameterValues.Nested.double_value_wrapper:type_name -> google.protobuf.DoubleValue
	1,  // 25: buf.vanguard.test.v1.ParameterValues.Nested.enum_value:type_name -> buf.vanguard.test.v1.ParameterValues.Nested.Enum
	18, // 26: buf.vanguard.test.v1.ParameterValues.StringValueMapEntry.value:type_name -> google.protobuf.StringValue
	0,  // 27: buf.vanguard.test.v1.ParameterValues.EnumMapEntry.value:type_name -> buf.vanguard.test.v1.ParameterValues.Enum
	3,  // 28: buf.vanguard.test.v1.ParameterValues.NestedMapEntry.value:type_name -> buf.vanguard.test.v1.ParameterValues.Nested
	29, // [29:29] is the sub-list for method output_type
	29, // [29:29] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_buf_vanguard_test_v1_test_proto_init() }
func file_buf_vanguard_test_v1_test_proto_init() {
	if File_buf_vanguard_test_v1_test_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_buf_vanguard_test_v1_test_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterValues); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_buf_vanguard_test_v1_test_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParameterValues_Nested); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_buf_vanguard_test_v1_test_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ParameterValues_OneofDoubleValue)(nil),
		(*ParameterValues_OneofDoubleValueWrapper)(nil),
		(*ParameterValues_OneofEnumValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_buf_vanguard_test_v1_test_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_buf_vanguard_test_v1_test_proto_goTypes,
		DependencyIndexes: file_buf_vanguard_test_v1_test_proto_depIdxs,
		EnumInfos:         file_buf_vanguard_test_v1_test_proto_enumTypes,
		MessageInfos:      file_buf_vanguard_test_v1_test_proto_msgTypes,
	}.Build()
	File_buf_vanguard_test_v1_test_proto = out.File
	file_buf_vanguard_test_v1_test_proto_rawDesc = nil
	file_buf_vanguard_test_v1_test_proto_goTypes = nil
	file_buf_vanguard_test_v1_test_proto_depIdxs = nil
}
