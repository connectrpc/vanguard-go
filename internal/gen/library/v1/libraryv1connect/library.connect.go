// Copyright 2021-2023 Buf Technologies, Inc.
//
// All rights reserved.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: library/v1/library.proto

package libraryv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/bufbuild/vanguard/internal/gen/library/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// LibraryServiceName is the fully-qualified name of the LibraryService service.
	LibraryServiceName = "vanguard.library.v1.LibraryService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// LibraryServiceGetBookProcedure is the fully-qualified name of the LibraryService's GetBook RPC.
	LibraryServiceGetBookProcedure = "/vanguard.library.v1.LibraryService/GetBook"
	// LibraryServiceCreateBookProcedure is the fully-qualified name of the LibraryService's CreateBook
	// RPC.
	LibraryServiceCreateBookProcedure = "/vanguard.library.v1.LibraryService/CreateBook"
)

// LibraryServiceClient is a client for the vanguard.library.v1.LibraryService service.
type LibraryServiceClient interface {
	GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.Book], error)
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.Book], error)
}

// NewLibraryServiceClient constructs a client for the vanguard.library.v1.LibraryService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewLibraryServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) LibraryServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &libraryServiceClient{
		getBook: connect_go.NewClient[v1.GetBookRequest, v1.Book](
			httpClient,
			baseURL+LibraryServiceGetBookProcedure,
			opts...,
		),
		createBook: connect_go.NewClient[v1.CreateBookRequest, v1.Book](
			httpClient,
			baseURL+LibraryServiceCreateBookProcedure,
			opts...,
		),
	}
}

// libraryServiceClient implements LibraryServiceClient.
type libraryServiceClient struct {
	getBook    *connect_go.Client[v1.GetBookRequest, v1.Book]
	createBook *connect_go.Client[v1.CreateBookRequest, v1.Book]
}

// GetBook calls vanguard.library.v1.LibraryService.GetBook.
func (c *libraryServiceClient) GetBook(ctx context.Context, req *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.Book], error) {
	return c.getBook.CallUnary(ctx, req)
}

// CreateBook calls vanguard.library.v1.LibraryService.CreateBook.
func (c *libraryServiceClient) CreateBook(ctx context.Context, req *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.Book], error) {
	return c.createBook.CallUnary(ctx, req)
}

// LibraryServiceHandler is an implementation of the vanguard.library.v1.LibraryService service.
type LibraryServiceHandler interface {
	GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.Book], error)
	CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.Book], error)
}

// NewLibraryServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewLibraryServiceHandler(svc LibraryServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	libraryServiceGetBookHandler := connect_go.NewUnaryHandler(
		LibraryServiceGetBookProcedure,
		svc.GetBook,
		opts...,
	)
	libraryServiceCreateBookHandler := connect_go.NewUnaryHandler(
		LibraryServiceCreateBookProcedure,
		svc.CreateBook,
		opts...,
	)
	return "/vanguard.library.v1.LibraryService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case LibraryServiceGetBookProcedure:
			libraryServiceGetBookHandler.ServeHTTP(w, r)
		case LibraryServiceCreateBookProcedure:
			libraryServiceCreateBookHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedLibraryServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedLibraryServiceHandler struct{}

func (UnimplementedLibraryServiceHandler) GetBook(context.Context, *connect_go.Request[v1.GetBookRequest]) (*connect_go.Response[v1.Book], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vanguard.library.v1.LibraryService.GetBook is not implemented"))
}

func (UnimplementedLibraryServiceHandler) CreateBook(context.Context, *connect_go.Request[v1.CreateBookRequest]) (*connect_go.Response[v1.Book], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("vanguard.library.v1.LibraryService.CreateBook is not implemented"))
}
