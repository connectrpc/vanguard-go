// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: openlibrary/v1/books.proto

package openlibraryv1connect

import (
	connect "connectrpc.com/connect"
	v1 "connectrpc.com/vanguard/internal/gen/openlibrary/v1"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// BooksServiceName is the fully-qualified name of the BooksService service.
	BooksServiceName = "openlibrary.v1.BooksService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BooksServiceGetBooksProcedure is the fully-qualified name of the BooksService's GetBooks RPC.
	BooksServiceGetBooksProcedure = "/openlibrary.v1.BooksService/GetBooks"
	// BooksServiceSearchBooksProcedure is the fully-qualified name of the BooksService's SearchBooks
	// RPC.
	BooksServiceSearchBooksProcedure = "/openlibrary.v1.BooksService/SearchBooks"
)

// BooksServiceClient is a client for the openlibrary.v1.BooksService service.
type BooksServiceClient interface {
	// Returns a list of books given a list of ISBNs, OCLC Numbers, LCCNs and
	// OLIDs (Open Library IDs).
	GetBooks(context.Context, *connect.Request[v1.GetBooksRequest]) (*connect.Response[v1.GetBooksResponse], error)
	// Searches for books and returns a list of books given a query string.
	SearchBooks(context.Context, *connect.Request[v1.SearchBooksRequest]) (*connect.Response[v1.SearchBooksResponse], error)
}

// NewBooksServiceClient constructs a client for the openlibrary.v1.BooksService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBooksServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BooksServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &booksServiceClient{
		getBooks: connect.NewClient[v1.GetBooksRequest, v1.GetBooksResponse](
			httpClient,
			baseURL+BooksServiceGetBooksProcedure,
			opts...,
		),
		searchBooks: connect.NewClient[v1.SearchBooksRequest, v1.SearchBooksResponse](
			httpClient,
			baseURL+BooksServiceSearchBooksProcedure,
			opts...,
		),
	}
}

// booksServiceClient implements BooksServiceClient.
type booksServiceClient struct {
	getBooks    *connect.Client[v1.GetBooksRequest, v1.GetBooksResponse]
	searchBooks *connect.Client[v1.SearchBooksRequest, v1.SearchBooksResponse]
}

// GetBooks calls openlibrary.v1.BooksService.GetBooks.
func (c *booksServiceClient) GetBooks(ctx context.Context, req *connect.Request[v1.GetBooksRequest]) (*connect.Response[v1.GetBooksResponse], error) {
	return c.getBooks.CallUnary(ctx, req)
}

// SearchBooks calls openlibrary.v1.BooksService.SearchBooks.
func (c *booksServiceClient) SearchBooks(ctx context.Context, req *connect.Request[v1.SearchBooksRequest]) (*connect.Response[v1.SearchBooksResponse], error) {
	return c.searchBooks.CallUnary(ctx, req)
}

// BooksServiceHandler is an implementation of the openlibrary.v1.BooksService service.
type BooksServiceHandler interface {
	// Returns a list of books given a list of ISBNs, OCLC Numbers, LCCNs and
	// OLIDs (Open Library IDs).
	GetBooks(context.Context, *connect.Request[v1.GetBooksRequest]) (*connect.Response[v1.GetBooksResponse], error)
	// Searches for books and returns a list of books given a query string.
	SearchBooks(context.Context, *connect.Request[v1.SearchBooksRequest]) (*connect.Response[v1.SearchBooksResponse], error)
}

// NewBooksServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBooksServiceHandler(svc BooksServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	booksServiceGetBooksHandler := connect.NewUnaryHandler(
		BooksServiceGetBooksProcedure,
		svc.GetBooks,
		opts...,
	)
	booksServiceSearchBooksHandler := connect.NewUnaryHandler(
		BooksServiceSearchBooksProcedure,
		svc.SearchBooks,
		opts...,
	)
	return "/openlibrary.v1.BooksService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BooksServiceGetBooksProcedure:
			booksServiceGetBooksHandler.ServeHTTP(w, r)
		case BooksServiceSearchBooksProcedure:
			booksServiceSearchBooksHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBooksServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBooksServiceHandler struct{}

func (UnimplementedBooksServiceHandler) GetBooks(context.Context, *connect.Request[v1.GetBooksRequest]) (*connect.Response[v1.GetBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openlibrary.v1.BooksService.GetBooks is not implemented"))
}

func (UnimplementedBooksServiceHandler) SearchBooks(context.Context, *connect.Request[v1.SearchBooksRequest]) (*connect.Response[v1.SearchBooksResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("openlibrary.v1.BooksService.SearchBooks is not implemented"))
}
