// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        (unknown)
// source: stripe/v1/payment_intents.proto

package stripev1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PaymentMethod_Card_Brand int32

const (
	PaymentMethod_Card_CARD_BRAND_UNKNOWN PaymentMethod_Card_Brand = 0
	PaymentMethod_Card_amex               PaymentMethod_Card_Brand = 1
	PaymentMethod_Card_diners             PaymentMethod_Card_Brand = 2
	PaymentMethod_Card_discover           PaymentMethod_Card_Brand = 3
	PaymentMethod_Card_eftpos_au          PaymentMethod_Card_Brand = 4
	PaymentMethod_Card_jcb                PaymentMethod_Card_Brand = 5
	PaymentMethod_Card_mastercard         PaymentMethod_Card_Brand = 6
	PaymentMethod_Card_unionpay           PaymentMethod_Card_Brand = 7
	PaymentMethod_Card_visa               PaymentMethod_Card_Brand = 8
)

// Enum value maps for PaymentMethod_Card_Brand.
var (
	PaymentMethod_Card_Brand_name = map[int32]string{
		0: "CARD_BRAND_UNKNOWN",
		1: "amex",
		2: "diners",
		3: "discover",
		4: "eftpos_au",
		5: "jcb",
		6: "mastercard",
		7: "unionpay",
		8: "visa",
	}
	PaymentMethod_Card_Brand_value = map[string]int32{
		"CARD_BRAND_UNKNOWN": 0,
		"amex":               1,
		"diners":             2,
		"discover":           3,
		"eftpos_au":          4,
		"jcb":                5,
		"mastercard":         6,
		"unionpay":           7,
		"visa":               8,
	}
)

func (x PaymentMethod_Card_Brand) Enum() *PaymentMethod_Card_Brand {
	p := new(PaymentMethod_Card_Brand)
	*p = x
	return p
}

func (x PaymentMethod_Card_Brand) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentMethod_Card_Brand) Descriptor() protoreflect.EnumDescriptor {
	return file_stripe_v1_payment_intents_proto_enumTypes[0].Descriptor()
}

func (PaymentMethod_Card_Brand) Type() protoreflect.EnumType {
	return &file_stripe_v1_payment_intents_proto_enumTypes[0]
}

func (x PaymentMethod_Card_Brand) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentMethod_Card_Brand.Descriptor instead.
func (PaymentMethod_Card_Brand) EnumDescriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 3, 0}
}

type PaymentIntent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// String representing the objectâ€™s type. Objects of the same type share the
	// same value.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// Amount intended to be collected by this PaymentIntent.
	Amount int64 `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	// Amount that can be captured from this PaymentIntent.
	AmountCapturable int64 `protobuf:"varint,4,opt,name=amount_capturable,json=amountCapturable,proto3" json:"amount_capturable,omitempty"`
	// Details about items that the amount includes.
	AmountDetails *PaymentIntent_AmountDetails `protobuf:"bytes,5,opt,name=amount_details,json=amountDetails,proto3" json:"amount_details,omitempty"`
	// Amount that this PaymentIntent collects.
	AmountReceived int64 `protobuf:"varint,6,opt,name=amount_received,json=amountReceived,proto3" json:"amount_received,omitempty"`
	// ID of the Connect application that created the PaymentIntent. Connect only.
	Application *string `protobuf:"bytes,7,opt,name=application,proto3,oneof" json:"application,omitempty"`
	// The amount of the application fee (if any) for the resulting payment.
	// Connect only.
	ApplicationFeeAmount *int64 `protobuf:"varint,8,opt,name=application_fee_amount,json=applicationFeeAmount,proto3,oneof" json:"application_fee_amount,omitempty"`
	// Populated when status is canceled, this is the time at which the
	// PaymentIntent was canceled.
	CanceledAt *int64 `protobuf:"varint,9,opt,name=canceled_at,json=canceledAt,proto3,oneof" json:"canceled_at,omitempty"`
	// Reason for cancellation of this PaymentIntent, either user-provided
	// (duplicate, fraudulent, requested_by_customer, or abandoned) or generated
	// by Stripe internally (failed_invoice, void_invoice, or automatic).
	CancellationReason string `protobuf:"bytes,10,opt,name=cancellation_reason,json=cancellationReason,proto3" json:"cancellation_reason,omitempty"`
	// Capture method of this PaymentIntent, one of automatic or manual.
	CaptureMethod string `protobuf:"bytes,11,opt,name=capture_method,json=captureMethod,proto3" json:"capture_method,omitempty"`
	// The client secret of this PaymentIntent. Used for client-side retrieval
	// using a publishable key.
	ClientSecret string `protobuf:"bytes,12,opt,name=client_secret,json=clientSecret,proto3" json:"client_secret,omitempty"`
	// Confirmation method of this PaymentIntent, one of automatic or manual.
	ConfirmationMethod string `protobuf:"bytes,13,opt,name=confirmation_method,json=confirmationMethod,proto3" json:"confirmation_method,omitempty"`
	// Time at which the object was created. Measured in seconds since the Unix
	// epoch.
	Created int64 `protobuf:"varint,14,opt,name=created,proto3" json:"created,omitempty"`
	// Three-letter ISO currency code, in lowercase. Must be a supported currency.
	Currency string `protobuf:"bytes,15,opt,name=currency,proto3" json:"currency,omitempty"`
	// ID of the Customer this PaymentIntent belongs to, if one exists.
	Customer *string `protobuf:"bytes,16,opt,name=customer,proto3,oneof" json:"customer,omitempty"`
	// An arbitrary string attached to the object.
	Description string `protobuf:"bytes,17,opt,name=description,proto3" json:"description,omitempty"`
	// ID of the invoice that created this PaymentIntent, if it exists.
	Invoice          *string                         `protobuf:"bytes,18,opt,name=invoice,proto3,oneof" json:"invoice,omitempty"`
	LastPaymentError *PaymentIntent_LastPaymentError `protobuf:"bytes,19,opt,name=last_payment_error,json=lastPaymentError,proto3" json:"last_payment_error,omitempty"`
	// Has the value true if the object exists in live mode or the value false if
	// the object exists in test mode.
	LiveMode bool `protobuf:"varint,21,opt,name=live_mode,json=liveMode,proto3" json:"live_mode,omitempty"`
	// Set of key-value pairs that you can attach to an object. This can be
	// useful for storing additional information about the object in a structured
	// format.
	Metadata map[string]string `protobuf:"bytes,22,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// If present, this property tells you what actions you need to take in order
	// for your customer to fulfill a payment using the provided source.
	NextAction                        *structpb.Struct                                 `protobuf:"bytes,23,opt,name=next_action,json=nextAction,proto3" json:"next_action,omitempty"`
	OnBehalfOf                        *string                                          `protobuf:"bytes,24,opt,name=on_behalf_of,json=onBehalfOf,proto3,oneof" json:"on_behalf_of,omitempty"`
	PaymentMethod                     *string                                          `protobuf:"bytes,25,opt,name=payment_method,json=paymentMethod,proto3,oneof" json:"payment_method,omitempty"`
	PaymentMethodConfigurationDetails *PaymentIntent_PaymentMethodConfigurationDetails `protobuf:"bytes,26,opt,name=payment_method_configuration_details,json=paymentMethodConfigurationDetails,proto3" json:"payment_method_configuration_details,omitempty"`
	PaymentMethodOptions              *PaymentIntent_PaymentMethodOptions              `protobuf:"bytes,27,opt,name=payment_method_options,json=paymentMethodOptions,proto3" json:"payment_method_options,omitempty"`
	// The list of payment method types (e.g. card) that this PaymentIntent is
	// allowed to use.
	PaymentMethodTypes []string                  `protobuf:"bytes,28,rep,name=payment_method_types,json=paymentMethodTypes,proto3" json:"payment_method_types,omitempty"`
	Processing         *PaymentIntent_Processing `protobuf:"bytes,29,opt,name=processing,proto3" json:"processing,omitempty"`
	// Email address that the receipt for the resulting payment will be sent to
	ReceiptEmail *string `protobuf:"bytes,30,opt,name=receipt_email,json=receiptEmail,proto3,oneof" json:"receipt_email,omitempty"`
	// ...
	Redaction *string `protobuf:"bytes,31,opt,name=redaction,proto3,oneof" json:"redaction,omitempty"`
	// ID of the review associated with this PaymentIntent, if any.
	Review *string `protobuf:"bytes,32,opt,name=review,proto3,oneof" json:"review,omitempty"`
	// For non-card charges, you can use this value as the complete description
	// that appears on your customersâ€™ statements. Must contain at least one
	// letter, maximum 22 characters.
	StatementDescriptor       *string                 `protobuf:"bytes,33,opt,name=statement_descriptor,json=statementDescriptor,proto3,oneof" json:"statement_descriptor,omitempty"`
	StatementDescriptorSuffix *string                 `protobuf:"bytes,34,opt,name=statement_descriptor_suffix,json=statementDescriptorSuffix,proto3,oneof" json:"statement_descriptor_suffix,omitempty"`
	SetupFutureUsage          *string                 `protobuf:"bytes,35,opt,name=setup_future_usage,json=setupFutureUsage,proto3,oneof" json:"setup_future_usage,omitempty"`
	Shipping                  *PaymentIntent_Shipping `protobuf:"bytes,36,opt,name=shipping,proto3" json:"shipping,omitempty"`
	// Status of this PaymentIntent, one of requires_payment_method,
	// requires_confirmation, requires_action, processing, requires_capture,
	// canceled, or succeeded. Read more about each PaymentIntent status.
	//
	//	enum Status {
	//	 unspecifed = 0;
	//	 requires_payment_method = 1;
	//	 requires_confirmation = 2;
	//	 requires_action = 3;
	//	 processing = 4;
	//	 requires_capture = 5;
	//	 canceled = 6;
	//	 succeeded = 7;
	//	}
	Status string `protobuf:"bytes,37,opt,name=status,proto3" json:"status,omitempty"`
	// The data that automatically creates a Transfer after the payment finalizes.
	// Learn more about the use case for connected accounts.
	TransferData *PaymentIntent_TransferData `protobuf:"bytes,38,opt,name=transfer_data,json=transferData,proto3" json:"transfer_data,omitempty"`
	// A string that identifies the resulting payment as part of a group. Learn
	// more about the use case for connected accounts.
	TransferGroup *string `protobuf:"bytes,39,opt,name=transfer_group,json=transferGroup,proto3,oneof" json:"transfer_group,omitempty"`
}

func (x *PaymentIntent) Reset() {
	*x = PaymentIntent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent) ProtoMessage() {}

func (x *PaymentIntent) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent.ProtoReflect.Descriptor instead.
func (*PaymentIntent) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0}
}

func (x *PaymentIntent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentIntent) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *PaymentIntent) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentIntent) GetAmountCapturable() int64 {
	if x != nil {
		return x.AmountCapturable
	}
	return 0
}

func (x *PaymentIntent) GetAmountDetails() *PaymentIntent_AmountDetails {
	if x != nil {
		return x.AmountDetails
	}
	return nil
}

func (x *PaymentIntent) GetAmountReceived() int64 {
	if x != nil {
		return x.AmountReceived
	}
	return 0
}

func (x *PaymentIntent) GetApplication() string {
	if x != nil && x.Application != nil {
		return *x.Application
	}
	return ""
}

func (x *PaymentIntent) GetApplicationFeeAmount() int64 {
	if x != nil && x.ApplicationFeeAmount != nil {
		return *x.ApplicationFeeAmount
	}
	return 0
}

func (x *PaymentIntent) GetCanceledAt() int64 {
	if x != nil && x.CanceledAt != nil {
		return *x.CanceledAt
	}
	return 0
}

func (x *PaymentIntent) GetCancellationReason() string {
	if x != nil {
		return x.CancellationReason
	}
	return ""
}

func (x *PaymentIntent) GetCaptureMethod() string {
	if x != nil {
		return x.CaptureMethod
	}
	return ""
}

func (x *PaymentIntent) GetClientSecret() string {
	if x != nil {
		return x.ClientSecret
	}
	return ""
}

func (x *PaymentIntent) GetConfirmationMethod() string {
	if x != nil {
		return x.ConfirmationMethod
	}
	return ""
}

func (x *PaymentIntent) GetCreated() int64 {
	if x != nil {
		return x.Created
	}
	return 0
}

func (x *PaymentIntent) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *PaymentIntent) GetCustomer() string {
	if x != nil && x.Customer != nil {
		return *x.Customer
	}
	return ""
}

func (x *PaymentIntent) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PaymentIntent) GetInvoice() string {
	if x != nil && x.Invoice != nil {
		return *x.Invoice
	}
	return ""
}

func (x *PaymentIntent) GetLastPaymentError() *PaymentIntent_LastPaymentError {
	if x != nil {
		return x.LastPaymentError
	}
	return nil
}

func (x *PaymentIntent) GetLiveMode() bool {
	if x != nil {
		return x.LiveMode
	}
	return false
}

func (x *PaymentIntent) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PaymentIntent) GetNextAction() *structpb.Struct {
	if x != nil {
		return x.NextAction
	}
	return nil
}

func (x *PaymentIntent) GetOnBehalfOf() string {
	if x != nil && x.OnBehalfOf != nil {
		return *x.OnBehalfOf
	}
	return ""
}

func (x *PaymentIntent) GetPaymentMethod() string {
	if x != nil && x.PaymentMethod != nil {
		return *x.PaymentMethod
	}
	return ""
}

func (x *PaymentIntent) GetPaymentMethodConfigurationDetails() *PaymentIntent_PaymentMethodConfigurationDetails {
	if x != nil {
		return x.PaymentMethodConfigurationDetails
	}
	return nil
}

func (x *PaymentIntent) GetPaymentMethodOptions() *PaymentIntent_PaymentMethodOptions {
	if x != nil {
		return x.PaymentMethodOptions
	}
	return nil
}

func (x *PaymentIntent) GetPaymentMethodTypes() []string {
	if x != nil {
		return x.PaymentMethodTypes
	}
	return nil
}

func (x *PaymentIntent) GetProcessing() *PaymentIntent_Processing {
	if x != nil {
		return x.Processing
	}
	return nil
}

func (x *PaymentIntent) GetReceiptEmail() string {
	if x != nil && x.ReceiptEmail != nil {
		return *x.ReceiptEmail
	}
	return ""
}

func (x *PaymentIntent) GetRedaction() string {
	if x != nil && x.Redaction != nil {
		return *x.Redaction
	}
	return ""
}

func (x *PaymentIntent) GetReview() string {
	if x != nil && x.Review != nil {
		return *x.Review
	}
	return ""
}

func (x *PaymentIntent) GetStatementDescriptor() string {
	if x != nil && x.StatementDescriptor != nil {
		return *x.StatementDescriptor
	}
	return ""
}

func (x *PaymentIntent) GetStatementDescriptorSuffix() string {
	if x != nil && x.StatementDescriptorSuffix != nil {
		return *x.StatementDescriptorSuffix
	}
	return ""
}

func (x *PaymentIntent) GetSetupFutureUsage() string {
	if x != nil && x.SetupFutureUsage != nil {
		return *x.SetupFutureUsage
	}
	return ""
}

func (x *PaymentIntent) GetShipping() *PaymentIntent_Shipping {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *PaymentIntent) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *PaymentIntent) GetTransferData() *PaymentIntent_TransferData {
	if x != nil {
		return x.TransferData
	}
	return nil
}

func (x *PaymentIntent) GetTransferGroup() string {
	if x != nil && x.TransferGroup != nil {
		return *x.TransferGroup
	}
	return ""
}

type CreatePaymentIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount intended to be collected by this PaymentIntent.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// Three-letter ISO currency code, in lowercase. Must be a supported currency.
	Currency                string                                              `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
	AutomaticPaymentMethods *CreatePaymentIntentRequest_AutomaticPaymentMethods `protobuf:"bytes,3,opt,name=automatic_payment_methods,json=automaticPaymentMethods,proto3" json:"automatic_payment_methods,omitempty"`
	// Set to true to attempt to confirm this PaymentIntent this PaymentIntent
	// immediately.
	Confirm bool `protobuf:"varint,4,opt,name=confirm,proto3" json:"confirm,omitempty"`
	// ID of the Customer this PaymentIntent belongs to, if one exists.
	Customer string `protobuf:"bytes,5,opt,name=customer,proto3" json:"customer,omitempty"`
	// An arbitrary string attached to the object
	Description string `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`
	// Set of key-value pairs that you can attach to an object.
	Metadata map[string]string `protobuf:"bytes,7,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Set to true to indicate that the customer isnâ€™t in your checkout flow
	// during this payment attempt and canâ€™t authenticate
	OffSession bool `protobuf:"varint,8,opt,name=off_session,json=offSession,proto3" json:"off_session,omitempty"`
	// ID of the payment method (a PaymentMethod, Card, or compatible Source
	// object) to attach to this PaymentIntent.
	PaymentMethod string `protobuf:"bytes,9,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// Email address to send the receipt to. If you specify receipt_email for a
	// payment in live mode, you send a receipt regardless of your email settings.
	ReceiptEmail string `protobuf:"bytes,10,opt,name=receipt_email,json=receiptEmail,proto3" json:"receipt_email,omitempty"`
	// Indicates that you intend to make future payments with this PaymentIntentâ€™s
	// payment method.
	SetupFutureUsage string                               `protobuf:"bytes,11,opt,name=setup_future_usage,json=setupFutureUsage,proto3" json:"setup_future_usage,omitempty"`
	Shipping         *CreatePaymentIntentRequest_Shipping `protobuf:"bytes,12,opt,name=shipping,proto3" json:"shipping,omitempty"`
	// For non-card charges, you can use this value as the complete description
	// that appears on your customersâ€™ statements
	StatementDescriptor string `protobuf:"bytes,13,opt,name=statement_descriptor,json=statementDescriptor,proto3" json:"statement_descriptor,omitempty"`
	// Provides information about a card payment that customers see on their
	// statements
	StatementDescriptorSuffix string `protobuf:"bytes,14,opt,name=statement_descriptor_suffix,json=statementDescriptorSuffix,proto3" json:"statement_descriptor_suffix,omitempty"`
}

func (x *CreatePaymentIntentRequest) Reset() {
	*x = CreatePaymentIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentIntentRequest) ProtoMessage() {}

func (x *CreatePaymentIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentIntentRequest.ProtoReflect.Descriptor instead.
func (*CreatePaymentIntentRequest) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{1}
}

func (x *CreatePaymentIntentRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *CreatePaymentIntentRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetAutomaticPaymentMethods() *CreatePaymentIntentRequest_AutomaticPaymentMethods {
	if x != nil {
		return x.AutomaticPaymentMethods
	}
	return nil
}

func (x *CreatePaymentIntentRequest) GetConfirm() bool {
	if x != nil {
		return x.Confirm
	}
	return false
}

func (x *CreatePaymentIntentRequest) GetCustomer() string {
	if x != nil {
		return x.Customer
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CreatePaymentIntentRequest) GetOffSession() bool {
	if x != nil {
		return x.OffSession
	}
	return false
}

func (x *CreatePaymentIntentRequest) GetPaymentMethod() string {
	if x != nil {
		return x.PaymentMethod
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetReceiptEmail() string {
	if x != nil {
		return x.ReceiptEmail
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetSetupFutureUsage() string {
	if x != nil {
		return x.SetupFutureUsage
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetShipping() *CreatePaymentIntentRequest_Shipping {
	if x != nil {
		return x.Shipping
	}
	return nil
}

func (x *CreatePaymentIntentRequest) GetStatementDescriptor() string {
	if x != nil {
		return x.StatementDescriptor
	}
	return ""
}

func (x *CreatePaymentIntentRequest) GetStatementDescriptorSuffix() string {
	if x != nil {
		return x.StatementDescriptorSuffix
	}
	return ""
}

type GetPaymentIntentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetPaymentIntentRequest) Reset() {
	*x = GetPaymentIntentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPaymentIntentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPaymentIntentRequest) ProtoMessage() {}

func (x *GetPaymentIntentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPaymentIntentRequest.ProtoReflect.Descriptor instead.
func (*GetPaymentIntentRequest) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{2}
}

func (x *GetPaymentIntentRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// The PaymentMethod object for errors returned on a request involving a
// PaymentMethod.
type PaymentMethod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the object.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// String representing the objectâ€™s type. Objects of the same type share
	// the same value.
	Object string `protobuf:"bytes,2,opt,name=object,proto3" json:"object,omitempty"`
	// Types that are assignable to PaymentMethod:
	//
	//	*PaymentMethod_AcssDebit
	//	*PaymentMethod_Affirm
	//	*PaymentMethod_AfterpayClearpay
	//	*PaymentMethod_Alipay
	//	*PaymentMethod_AuBecsDebit_
	//	*PaymentMethod_BacsDebit_
	//	*PaymentMethod_Bancontact
	//	*PaymentMethod_Card_
	PaymentMethod  isPaymentMethod_PaymentMethod `protobuf_oneof:"payment_method"`
	BillingDetails *PaymentMethod_BillingDetails `protobuf:"bytes,15,opt,name=billing_details,json=billingDetails,proto3" json:"billing_details,omitempty"`
	// The type of the PaymentMethod. An additional hash is included on the
	// PaymentMethod with a name matching this value. It contains additional
	// information specific to the PaymentMethod type.
	Type string `protobuf:"bytes,16,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PaymentMethod) Reset() {
	*x = PaymentMethod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod) ProtoMessage() {}

func (x *PaymentMethod) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod.ProtoReflect.Descriptor instead.
func (*PaymentMethod) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3}
}

func (x *PaymentMethod) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentMethod) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (m *PaymentMethod) GetPaymentMethod() isPaymentMethod_PaymentMethod {
	if m != nil {
		return m.PaymentMethod
	}
	return nil
}

func (x *PaymentMethod) GetAcssDebit() *PaymentMethod_ACSSDebit {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_AcssDebit); ok {
		return x.AcssDebit
	}
	return nil
}

func (x *PaymentMethod) GetAffirm() *structpb.Struct {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_Affirm); ok {
		return x.Affirm
	}
	return nil
}

func (x *PaymentMethod) GetAfterpayClearpay() *structpb.Struct {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_AfterpayClearpay); ok {
		return x.AfterpayClearpay
	}
	return nil
}

func (x *PaymentMethod) GetAlipay() *structpb.Struct {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_Alipay); ok {
		return x.Alipay
	}
	return nil
}

func (x *PaymentMethod) GetAuBecsDebit() *PaymentMethod_AuBecsDebit {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_AuBecsDebit_); ok {
		return x.AuBecsDebit
	}
	return nil
}

func (x *PaymentMethod) GetBacsDebit() *PaymentMethod_BacsDebit {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_BacsDebit_); ok {
		return x.BacsDebit
	}
	return nil
}

func (x *PaymentMethod) GetBancontact() *structpb.Struct {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_Bancontact); ok {
		return x.Bancontact
	}
	return nil
}

func (x *PaymentMethod) GetCard() *PaymentMethod_Card {
	if x, ok := x.GetPaymentMethod().(*PaymentMethod_Card_); ok {
		return x.Card
	}
	return nil
}

func (x *PaymentMethod) GetBillingDetails() *PaymentMethod_BillingDetails {
	if x != nil {
		return x.BillingDetails
	}
	return nil
}

func (x *PaymentMethod) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type isPaymentMethod_PaymentMethod interface {
	isPaymentMethod_PaymentMethod()
}

type PaymentMethod_AcssDebit struct {
	AcssDebit *PaymentMethod_ACSSDebit `protobuf:"bytes,3,opt,name=acss_debit,json=acssDebit,proto3,oneof"`
}

type PaymentMethod_Affirm struct {
	// If this is an affirm PaymentMethod, this hash contains details about
	// the Affirm payment method.
	Affirm *structpb.Struct `protobuf:"bytes,4,opt,name=affirm,proto3,oneof"`
}

type PaymentMethod_AfterpayClearpay struct {
	// If this is an AfterpayClearpay PaymentMethod, this hash contains
	// details about the AfterpayClearpay payment method.
	AfterpayClearpay *structpb.Struct `protobuf:"bytes,5,opt,name=afterpay_clearpay,json=afterpayClearpay,proto3,oneof"`
}

type PaymentMethod_Alipay struct {
	// If this is an alipay PaymentMethod, this hash contains details about
	// the Alipay payment method.
	Alipay *structpb.Struct `protobuf:"bytes,6,opt,name=alipay,proto3,oneof"`
}

type PaymentMethod_AuBecsDebit_ struct {
	AuBecsDebit *PaymentMethod_AuBecsDebit `protobuf:"bytes,7,opt,name=au_becs_debit,json=auBecsDebit,proto3,oneof"`
}

type PaymentMethod_BacsDebit_ struct {
	BacsDebit *PaymentMethod_BacsDebit `protobuf:"bytes,8,opt,name=bacs_debit,json=bacsDebit,proto3,oneof"`
}

type PaymentMethod_Bancontact struct {
	// If this is a bancontact PaymentMethod, this hash contains details
	// about the Bancontact payment method.
	Bancontact *structpb.Struct `protobuf:"bytes,9,opt,name=bancontact,proto3,oneof"`
}

type PaymentMethod_Card_ struct {
	Card *PaymentMethod_Card `protobuf:"bytes,14,opt,name=card,proto3,oneof"`
}

func (*PaymentMethod_AcssDebit) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_Affirm) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_AfterpayClearpay) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_Alipay) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_AuBecsDebit_) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_BacsDebit_) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_Bancontact) isPaymentMethod_PaymentMethod() {}

func (*PaymentMethod_Card_) isPaymentMethod_PaymentMethod() {}

type PaymentIntent_AmountDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Tip included in the amount.
	Tip *PaymentIntent_AmountDetails_Tip `protobuf:"bytes,1,opt,name=tip,proto3" json:"tip,omitempty"`
}

func (x *PaymentIntent_AmountDetails) Reset() {
	*x = PaymentIntent_AmountDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_AmountDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_AmountDetails) ProtoMessage() {}

func (x *PaymentIntent_AmountDetails) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_AmountDetails.ProtoReflect.Descriptor instead.
func (*PaymentIntent_AmountDetails) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 0}
}

func (x *PaymentIntent_AmountDetails) GetTip() *PaymentIntent_AmountDetails_Tip {
	if x != nil {
		return x.Tip
	}
	return nil
}

// The payment error encountered in the previous PaymentIntent confirmation.
type PaymentIntent_LastPaymentError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of error returned. One of api_error, card_error,
	// idempotency_error, or invalid_request_error
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// For card errors, the ID of the failed charge.
	Charge string `protobuf:"bytes,2,opt,name=charge,proto3" json:"charge,omitempty"`
	// For some errors that could be handled programmatically, a short string
	// indicating the error code reported.
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// For card errors resulting from a card issuer decline, a short string
	// indicating the card issuerâ€™s reason for the decline if they provide one.
	DeclineCode string `protobuf:"bytes,4,opt,name=decline_code,json=declineCode,proto3" json:"decline_code,omitempty"`
	// A URL to more information about the error code reported.
	DocUrl string `protobuf:"bytes,5,opt,name=doc_url,json=docUrl,proto3" json:"doc_url,omitempty"`
	// A human-readable message providing more details about the error. For card
	// errors, these messages can be shown to your users.
	Message string `protobuf:"bytes,6,opt,name=message,proto3" json:"message,omitempty"`
	// If the error is parameter-specific, the parameter related to the error.
	// For example, you can use this to display a message near the correct form
	// field.
	Param string `protobuf:"bytes,7,opt,name=param,proto3" json:"param,omitempty"`
	// The PaymentMethod object for errors returned on a request involving a
	// PaymentMethod.
	PaymentMethod *PaymentMethod `protobuf:"bytes,8,opt,name=payment_method,json=paymentMethod,proto3" json:"payment_method,omitempty"`
	// If the error is specific to the type of payment method, the payment
	// method type that had a problem. This field is only populated for
	// invoice-related errors.
	PaymentMethodType string `protobuf:"bytes,9,opt,name=payment_method_type,json=paymentMethodType,proto3" json:"payment_method_type,omitempty"`
}

func (x *PaymentIntent_LastPaymentError) Reset() {
	*x = PaymentIntent_LastPaymentError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_LastPaymentError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_LastPaymentError) ProtoMessage() {}

func (x *PaymentIntent_LastPaymentError) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_LastPaymentError.ProtoReflect.Descriptor instead.
func (*PaymentIntent_LastPaymentError) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 1}
}

func (x *PaymentIntent_LastPaymentError) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetCharge() string {
	if x != nil {
		return x.Charge
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetDeclineCode() string {
	if x != nil {
		return x.DeclineCode
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetDocUrl() string {
	if x != nil {
		return x.DocUrl
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetParam() string {
	if x != nil {
		return x.Param
	}
	return ""
}

func (x *PaymentIntent_LastPaymentError) GetPaymentMethod() *PaymentMethod {
	if x != nil {
		return x.PaymentMethod
	}
	return nil
}

func (x *PaymentIntent_LastPaymentError) GetPaymentMethodType() string {
	if x != nil {
		return x.PaymentMethodType
	}
	return ""
}

type PaymentIntent_PaymentMethodConfigurationDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID of the payment method configuration used.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// ID of the parent payment method configuration used.
	Parent string `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
}

func (x *PaymentIntent_PaymentMethodConfigurationDetails) Reset() {
	*x = PaymentIntent_PaymentMethodConfigurationDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodConfigurationDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodConfigurationDetails) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodConfigurationDetails) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodConfigurationDetails.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodConfigurationDetails) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 3}
}

func (x *PaymentIntent_PaymentMethodConfigurationDetails) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodConfigurationDetails) GetParent() string {
	if x != nil {
		return x.Parent
	}
	return ""
}

type PaymentIntent_PaymentMethodOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *PaymentIntent_PaymentMethodOptions_Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
}

func (x *PaymentIntent_PaymentMethodOptions) Reset() {
	*x = PaymentIntent_PaymentMethodOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodOptions) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodOptions.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodOptions) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 4}
}

func (x *PaymentIntent_PaymentMethodOptions) GetCard() *PaymentIntent_PaymentMethodOptions_Card {
	if x != nil {
		return x.Card
	}
	return nil
}

type PaymentIntent_Processing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Card *PaymentIntent_Processing_Card `protobuf:"bytes,1,opt,name=card,proto3" json:"card,omitempty"`
	// Type of the payment method for which payment is in processing state, one
	// of card.
	CustomerNotification string `protobuf:"bytes,2,opt,name=customer_notification,json=customerNotification,proto3" json:"customer_notification,omitempty"`
}

func (x *PaymentIntent_Processing) Reset() {
	*x = PaymentIntent_Processing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_Processing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_Processing) ProtoMessage() {}

func (x *PaymentIntent_Processing) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_Processing.ProtoReflect.Descriptor instead.
func (*PaymentIntent_Processing) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 5}
}

func (x *PaymentIntent_Processing) GetCard() *PaymentIntent_Processing_Card {
	if x != nil {
		return x.Card
	}
	return nil
}

func (x *PaymentIntent_Processing) GetCustomerNotification() string {
	if x != nil {
		return x.CustomerNotification
	}
	return ""
}

// Shipping information for this PaymentIntent.
type PaymentIntent_Shipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *PaymentIntent_Shipping_Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Recipient name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The delivery service that shipped a physical product, such as Fedex, UPS,
	// USPS, etc.
	Carrier string `protobuf:"bytes,3,opt,name=carrier,proto3" json:"carrier,omitempty"`
	// Recipient phone (including extension).
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// The tracking number for a physical product, obtained from the delivery
	// service. If multiple tracking numbers were generated for this purchase,
	// please separate them with commas.
	TrackingNumber string `protobuf:"bytes,5,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
}

func (x *PaymentIntent_Shipping) Reset() {
	*x = PaymentIntent_Shipping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_Shipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_Shipping) ProtoMessage() {}

func (x *PaymentIntent_Shipping) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_Shipping.ProtoReflect.Descriptor instead.
func (*PaymentIntent_Shipping) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 6}
}

func (x *PaymentIntent_Shipping) GetAddress() *PaymentIntent_Shipping_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PaymentIntent_Shipping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentIntent_Shipping) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *PaymentIntent_Shipping) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *PaymentIntent_Shipping) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

type PaymentIntent_TransferData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Amount intended to be collected by this PaymentIntent.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The account (if any) that the payment is attributed to for tax reporting,
	// and where funds from the payment are transferred to after payment
	// success.
	Destination string `protobuf:"bytes,2,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *PaymentIntent_TransferData) Reset() {
	*x = PaymentIntent_TransferData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_TransferData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_TransferData) ProtoMessage() {}

func (x *PaymentIntent_TransferData) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_TransferData.ProtoReflect.Descriptor instead.
func (*PaymentIntent_TransferData) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 7}
}

func (x *PaymentIntent_TransferData) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *PaymentIntent_TransferData) GetDestination() string {
	if x != nil {
		return x.Destination
	}
	return ""
}

type PaymentIntent_AmountDetails_Tip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Portion of the amount that corresponds to a tip.
	Amount int64 `protobuf:"varint,1,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *PaymentIntent_AmountDetails_Tip) Reset() {
	*x = PaymentIntent_AmountDetails_Tip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_AmountDetails_Tip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_AmountDetails_Tip) ProtoMessage() {}

func (x *PaymentIntent_AmountDetails_Tip) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_AmountDetails_Tip.ProtoReflect.Descriptor instead.
func (*PaymentIntent_AmountDetails_Tip) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *PaymentIntent_AmountDetails_Tip) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type PaymentIntent_PaymentMethodOptions_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaptureMethod       string                                                  `protobuf:"bytes,1,opt,name=capture_method,json=captureMethod,proto3" json:"capture_method,omitempty"`
	Installments        *PaymentIntent_PaymentMethodOptions_Card_Installments   `protobuf:"bytes,2,opt,name=installments,proto3" json:"installments,omitempty"`
	MandateOptions      *PaymentIntent_PaymentMethodOptions_Card_MandateOptions `protobuf:"bytes,3,opt,name=mandate_options,json=mandateOptions,proto3" json:"mandate_options,omitempty"`
	Network             *string                                                 `protobuf:"bytes,4,opt,name=network,proto3,oneof" json:"network,omitempty"`
	RequestThreeDSecure *string                                                 `protobuf:"bytes,5,opt,name=request_three_d_secure,json=requestThreeDSecure,proto3,oneof" json:"request_three_d_secure,omitempty"`
	SetupFutureUsage    *string                                                 `protobuf:"bytes,6,opt,name=setup_future_usage,json=setupFutureUsage,proto3,oneof" json:"setup_future_usage,omitempty"`
	// Provides information about a card payment that customers see on their
	// statements.
	StatementDescriptorSuffixKana string `protobuf:"bytes,7,opt,name=statement_descriptor_suffix_kana,json=statementDescriptorSuffixKana,proto3" json:"statement_descriptor_suffix_kana,omitempty"`
	// Provides information about a card payment that customers see on their
	// statements.
	StatementDescriptorSuffixKanji string `protobuf:"bytes,8,opt,name=statement_descriptor_suffix_kanji,json=statementDescriptorSuffixKanji,proto3" json:"statement_descriptor_suffix_kanji,omitempty"`
}

func (x *PaymentIntent_PaymentMethodOptions_Card) Reset() {
	*x = PaymentIntent_PaymentMethodOptions_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodOptions_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodOptions_Card) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodOptions_Card) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodOptions_Card.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodOptions_Card) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 4, 0}
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetCaptureMethod() string {
	if x != nil {
		return x.CaptureMethod
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetInstallments() *PaymentIntent_PaymentMethodOptions_Card_Installments {
	if x != nil {
		return x.Installments
	}
	return nil
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetMandateOptions() *PaymentIntent_PaymentMethodOptions_Card_MandateOptions {
	if x != nil {
		return x.MandateOptions
	}
	return nil
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetNetwork() string {
	if x != nil && x.Network != nil {
		return *x.Network
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetRequestThreeDSecure() string {
	if x != nil && x.RequestThreeDSecure != nil {
		return *x.RequestThreeDSecure
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetSetupFutureUsage() string {
	if x != nil && x.SetupFutureUsage != nil {
		return *x.SetupFutureUsage
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetStatementDescriptorSuffixKana() string {
	if x != nil {
		return x.StatementDescriptorSuffixKana
	}
	return ""
}

func (x *PaymentIntent_PaymentMethodOptions_Card) GetStatementDescriptorSuffixKanji() string {
	if x != nil {
		return x.StatementDescriptorSuffixKanji
	}
	return ""
}

type PaymentIntent_PaymentMethodOptions_Card_Installments struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Installment plans that may be selected for this PaymentIntent.
	AvailablePlans []*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan `protobuf:"bytes,1,rep,name=available_plans,json=availablePlans,proto3" json:"available_plans,omitempty"`
	// Whether installments are enabled for this PaymentIntent.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// The selected installment plan for this PaymentIntent.
	Plan *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan `protobuf:"bytes,3,opt,name=plan,proto3" json:"plan,omitempty"`
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) Reset() {
	*x = PaymentIntent_PaymentMethodOptions_Card_Installments{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodOptions_Card_Installments) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodOptions_Card_Installments.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodOptions_Card_Installments) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 4, 0, 0}
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) GetAvailablePlans() []*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan {
	if x != nil {
		return x.AvailablePlans
	}
	return nil
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments) GetPlan() *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan {
	if x != nil {
		return x.Plan
	}
	return nil
}

type PaymentIntent_PaymentMethodOptions_Card_MandateOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PaymentIntent_PaymentMethodOptions_Card_MandateOptions) Reset() {
	*x = PaymentIntent_PaymentMethodOptions_Card_MandateOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodOptions_Card_MandateOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodOptions_Card_MandateOptions) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodOptions_Card_MandateOptions) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodOptions_Card_MandateOptions.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodOptions_Card_MandateOptions) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 4, 0, 1}
}

type PaymentIntent_PaymentMethodOptions_Card_Installments_Plan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count    int32  `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Interval int32  `protobuf:"varint,2,opt,name=interval,proto3" json:"interval,omitempty"`
	Type     string `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) Reset() {
	*x = PaymentIntent_PaymentMethodOptions_Card_Installments_Plan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) ProtoMessage() {}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_PaymentMethodOptions_Card_Installments_Plan.ProtoReflect.Descriptor instead.
func (*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 4, 0, 0, 0}
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PaymentIntent_PaymentMethodOptions_Card_Installments_Plan) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

type PaymentIntent_Processing_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CustomerNotification *PaymentIntent_Processing_Card_CustomerNotification `protobuf:"bytes,1,opt,name=customer_notification,json=customerNotification,proto3" json:"customer_notification,omitempty"`
}

func (x *PaymentIntent_Processing_Card) Reset() {
	*x = PaymentIntent_Processing_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_Processing_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_Processing_Card) ProtoMessage() {}

func (x *PaymentIntent_Processing_Card) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_Processing_Card.ProtoReflect.Descriptor instead.
func (*PaymentIntent_Processing_Card) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 5, 0}
}

func (x *PaymentIntent_Processing_Card) GetCustomerNotification() *PaymentIntent_Processing_Card_CustomerNotification {
	if x != nil {
		return x.CustomerNotification
	}
	return nil
}

type PaymentIntent_Processing_Card_CustomerNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether customer approval has been requested for this payment.
	ApprovalRequested bool `protobuf:"varint,1,opt,name=approval_requested,json=approvalRequested,proto3" json:"approval_requested,omitempty"`
	// If customer approval is required, they need to provide approval
	// before this time.
	CompletesAt int64 `protobuf:"varint,2,opt,name=completes_at,json=completesAt,proto3" json:"completes_at,omitempty"`
}

func (x *PaymentIntent_Processing_Card_CustomerNotification) Reset() {
	*x = PaymentIntent_Processing_Card_CustomerNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_Processing_Card_CustomerNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_Processing_Card_CustomerNotification) ProtoMessage() {}

func (x *PaymentIntent_Processing_Card_CustomerNotification) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_Processing_Card_CustomerNotification.ProtoReflect.Descriptor instead.
func (*PaymentIntent_Processing_Card_CustomerNotification) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 5, 0, 0}
}

func (x *PaymentIntent_Processing_Card_CustomerNotification) GetApprovalRequested() bool {
	if x != nil {
		return x.ApprovalRequested
	}
	return false
}

func (x *PaymentIntent_Processing_Card_CustomerNotification) GetCompletesAt() int64 {
	if x != nil {
		return x.CompletesAt
	}
	return 0
}

// Shipping address.
type PaymentIntent_Shipping_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// City, district, suburb, town, or village.
	City string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Address line 1 (e.g., street, PO Box, or company name).
	Line1 string `protobuf:"bytes,3,opt,name=line1,proto3" json:"line1,omitempty"`
	// Address line 2 (e.g., apartment, suite, unit, or building).
	Line2 string `protobuf:"bytes,4,opt,name=line2,proto3" json:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// State, county, province, or region.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PaymentIntent_Shipping_Address) Reset() {
	*x = PaymentIntent_Shipping_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentIntent_Shipping_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentIntent_Shipping_Address) ProtoMessage() {}

func (x *PaymentIntent_Shipping_Address) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentIntent_Shipping_Address.ProtoReflect.Descriptor instead.
func (*PaymentIntent_Shipping_Address) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{0, 6, 0}
}

func (x *PaymentIntent_Shipping_Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PaymentIntent_Shipping_Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentIntent_Shipping_Address) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *PaymentIntent_Shipping_Address) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

func (x *PaymentIntent_Shipping_Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PaymentIntent_Shipping_Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

// When you enable this parameter, this PaymentIntent accepts payment methods
// that you enable in the Dashboard and that are compatible with this
// PaymentIntentâ€™s other parameters.
type CreatePaymentIntentRequest_AutomaticPaymentMethods struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Whether this feature is enabled.
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Controls whether this PaymentIntent will accept redirect-based payment
	// methods.
	AllowRedirects string `protobuf:"bytes,2,opt,name=allow_redirects,json=allowRedirects,proto3" json:"allow_redirects,omitempty"`
}

func (x *CreatePaymentIntentRequest_AutomaticPaymentMethods) Reset() {
	*x = CreatePaymentIntentRequest_AutomaticPaymentMethods{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentIntentRequest_AutomaticPaymentMethods) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentIntentRequest_AutomaticPaymentMethods) ProtoMessage() {}

func (x *CreatePaymentIntentRequest_AutomaticPaymentMethods) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentIntentRequest_AutomaticPaymentMethods.ProtoReflect.Descriptor instead.
func (*CreatePaymentIntentRequest_AutomaticPaymentMethods) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{1, 0}
}

func (x *CreatePaymentIntentRequest_AutomaticPaymentMethods) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *CreatePaymentIntentRequest_AutomaticPaymentMethods) GetAllowRedirects() string {
	if x != nil {
		return x.AllowRedirects
	}
	return ""
}

// Shipping information for this PaymentIntent.
type CreatePaymentIntentRequest_Shipping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Shipping address.
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Recipient name.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The delivery service that shipped a physical product, such as Fedex, UPS,
	// USPS, etc.
	Carrier string `protobuf:"bytes,3,opt,name=carrier,proto3" json:"carrier,omitempty"`
	// Recipient phone (including extension).
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
	// The tracking number for a physical product, obtained from the delivery
	// service. If multiple tracking numbers were generated for this purchase,
	// please separate them with commas.
	TrackingNumber string `protobuf:"bytes,5,opt,name=tracking_number,json=trackingNumber,proto3" json:"tracking_number,omitempty"`
}

func (x *CreatePaymentIntentRequest_Shipping) Reset() {
	*x = CreatePaymentIntentRequest_Shipping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatePaymentIntentRequest_Shipping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatePaymentIntentRequest_Shipping) ProtoMessage() {}

func (x *CreatePaymentIntentRequest_Shipping) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatePaymentIntentRequest_Shipping.ProtoReflect.Descriptor instead.
func (*CreatePaymentIntentRequest_Shipping) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{1, 2}
}

func (x *CreatePaymentIntentRequest_Shipping) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *CreatePaymentIntentRequest_Shipping) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreatePaymentIntentRequest_Shipping) GetCarrier() string {
	if x != nil {
		return x.Carrier
	}
	return ""
}

func (x *CreatePaymentIntentRequest_Shipping) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *CreatePaymentIntentRequest_Shipping) GetTrackingNumber() string {
	if x != nil {
		return x.TrackingNumber
	}
	return ""
}

// If this is an acss_debit PaymentMethod, this hash contains details
// about the ACSS Debit payment method.
type PaymentMethod_ACSSDebit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bank associated with the bank account.
	BankName string `protobuf:"bytes,1,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	// Uniquely identifies this particular bank account. You can use this
	// attribute to check whether two bank accounts are the same.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Institution number of the bank account.
	InstitutionNumber string `protobuf:"bytes,3,opt,name=institution_number,json=institutionNumber,proto3" json:"institution_number,omitempty"`
	// Last four characters of the bank account number.
	Last4 string `protobuf:"bytes,4,opt,name=last4,proto3" json:"last4,omitempty"`
	// Transit number of the bank account.
	TransitNumber string `protobuf:"bytes,5,opt,name=transit_number,json=transitNumber,proto3" json:"transit_number,omitempty"`
}

func (x *PaymentMethod_ACSSDebit) Reset() {
	*x = PaymentMethod_ACSSDebit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_ACSSDebit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_ACSSDebit) ProtoMessage() {}

func (x *PaymentMethod_ACSSDebit) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_ACSSDebit.ProtoReflect.Descriptor instead.
func (*PaymentMethod_ACSSDebit) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 0}
}

func (x *PaymentMethod_ACSSDebit) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *PaymentMethod_ACSSDebit) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *PaymentMethod_ACSSDebit) GetInstitutionNumber() string {
	if x != nil {
		return x.InstitutionNumber
	}
	return ""
}

func (x *PaymentMethod_ACSSDebit) GetLast4() string {
	if x != nil {
		return x.Last4
	}
	return ""
}

func (x *PaymentMethod_ACSSDebit) GetTransitNumber() string {
	if x != nil {
		return x.TransitNumber
	}
	return ""
}

// If this is an au_becs_debit PaymentMethod, this hash contains details
// about the bank account.
type PaymentMethod_AuBecsDebit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Six-digit number identifying bank and branch associated with this
	// bank account.
	BsbNumber string `protobuf:"bytes,1,opt,name=bsb_number,json=bsbNumber,proto3" json:"bsb_number,omitempty"`
	// Uniquely identifies this particular bank account. You can use this
	// attribute to check whether two bank accounts are the same.
	Fingerprint string `protobuf:"bytes,2,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Last four characters of the bank account number.
	Last4 string `protobuf:"bytes,3,opt,name=last4,proto3" json:"last4,omitempty"`
}

func (x *PaymentMethod_AuBecsDebit) Reset() {
	*x = PaymentMethod_AuBecsDebit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_AuBecsDebit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_AuBecsDebit) ProtoMessage() {}

func (x *PaymentMethod_AuBecsDebit) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_AuBecsDebit.ProtoReflect.Descriptor instead.
func (*PaymentMethod_AuBecsDebit) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 1}
}

func (x *PaymentMethod_AuBecsDebit) GetBsbNumber() string {
	if x != nil {
		return x.BsbNumber
	}
	return ""
}

func (x *PaymentMethod_AuBecsDebit) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *PaymentMethod_AuBecsDebit) GetLast4() string {
	if x != nil {
		return x.Last4
	}
	return ""
}

// If this is a bacs_debit PaymentMethod, this hash contains details
// about the Bacs Direct Debit bank account.
type PaymentMethod_BacsDebit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Uniquely identifies this particular bank account. You can use this
	// attribute to check whether two bank accounts are the same.
	Fingerprint string `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Last four characters of the bank account number.
	Last4 string `protobuf:"bytes,2,opt,name=last4,proto3" json:"last4,omitempty"`
	// Sort code of the bank account.
	SortCode string `protobuf:"bytes,3,opt,name=sort_code,json=sortCode,proto3" json:"sort_code,omitempty"`
}

func (x *PaymentMethod_BacsDebit) Reset() {
	*x = PaymentMethod_BacsDebit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_BacsDebit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_BacsDebit) ProtoMessage() {}

func (x *PaymentMethod_BacsDebit) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_BacsDebit.ProtoReflect.Descriptor instead.
func (*PaymentMethod_BacsDebit) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 2}
}

func (x *PaymentMethod_BacsDebit) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *PaymentMethod_BacsDebit) GetLast4() string {
	if x != nil {
		return x.Last4
	}
	return ""
}

func (x *PaymentMethod_BacsDebit) GetSortCode() string {
	if x != nil {
		return x.SortCode
	}
	return ""
}

type PaymentMethod_Card struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Card brand. Can be amex, diners, discover, eftpos_au, jcb,
	// mastercard, unionpay, visa, or unknown.
	Brand  PaymentMethod_Card_Brand   `protobuf:"varint,1,opt,name=brand,proto3,enum=stripe.v1.PaymentMethod_Card_Brand" json:"brand,omitempty"`
	Checks *PaymentMethod_Card_Checks `protobuf:"bytes,2,opt,name=checks,proto3" json:"checks,omitempty"`
	// Two-letter ISO code representing the country of the card. You could
	// use this attribute to get a sense of the international breakdown of
	// cards youâ€™ve collected.
	Country string `protobuf:"bytes,3,opt,name=country,proto3" json:"country,omitempty"`
	// Two-digit number representing the cardâ€™s expiration month.
	ExpMonth int32 `protobuf:"varint,4,opt,name=exp_month,json=expMonth,proto3" json:"exp_month,omitempty"`
	// Four-digit number representing the cardâ€™s expiration year.
	ExpYear int32 `protobuf:"varint,5,opt,name=exp_year,json=expYear,proto3" json:"exp_year,omitempty"`
	// Uniquely identifies this particular card number. You can use this
	// attribute to check whether two customers whoâ€™ve signed up with you
	// are using the same card number,for example.
	Fingerprint string `protobuf:"bytes,6,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	// Card funding type. Can be credit, debit, prepaid, or unknown.
	Funding string `protobuf:"bytes,7,opt,name=funding,proto3" json:"funding,omitempty"` //
}

func (x *PaymentMethod_Card) Reset() {
	*x = PaymentMethod_Card{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_Card) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_Card) ProtoMessage() {}

func (x *PaymentMethod_Card) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_Card.ProtoReflect.Descriptor instead.
func (*PaymentMethod_Card) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 3}
}

func (x *PaymentMethod_Card) GetBrand() PaymentMethod_Card_Brand {
	if x != nil {
		return x.Brand
	}
	return PaymentMethod_Card_CARD_BRAND_UNKNOWN
}

func (x *PaymentMethod_Card) GetChecks() *PaymentMethod_Card_Checks {
	if x != nil {
		return x.Checks
	}
	return nil
}

func (x *PaymentMethod_Card) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentMethod_Card) GetExpMonth() int32 {
	if x != nil {
		return x.ExpMonth
	}
	return 0
}

func (x *PaymentMethod_Card) GetExpYear() int32 {
	if x != nil {
		return x.ExpYear
	}
	return 0
}

func (x *PaymentMethod_Card) GetFingerprint() string {
	if x != nil {
		return x.Fingerprint
	}
	return ""
}

func (x *PaymentMethod_Card) GetFunding() string {
	if x != nil {
		return x.Funding
	}
	return ""
}

// Billing information associated with the PaymentMethod that may be used
// or required by particular types of payment methods.
type PaymentMethod_BillingDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address *PaymentMethod_BillingDetails_Address `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// Email address.
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	// Full name.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Billing phone number (including extension).
	Phone string `protobuf:"bytes,4,opt,name=phone,proto3" json:"phone,omitempty"`
}

func (x *PaymentMethod_BillingDetails) Reset() {
	*x = PaymentMethod_BillingDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_BillingDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_BillingDetails) ProtoMessage() {}

func (x *PaymentMethod_BillingDetails) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_BillingDetails.ProtoReflect.Descriptor instead.
func (*PaymentMethod_BillingDetails) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 4}
}

func (x *PaymentMethod_BillingDetails) GetAddress() *PaymentMethod_BillingDetails_Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PaymentMethod_BillingDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *PaymentMethod_BillingDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PaymentMethod_BillingDetails) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

// Checks on Card address and CVC if provided.
type PaymentMethod_Card_Checks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddressLine1Check      string `protobuf:"bytes,1,opt,name=address_line1_check,json=addressLine1Check,proto3" json:"address_line1_check,omitempty"`
	AddressPostalCodeCheck string `protobuf:"bytes,2,opt,name=address_postal_code_check,json=addressPostalCodeCheck,proto3" json:"address_postal_code_check,omitempty"`
	CvcCheck               string `protobuf:"bytes,3,opt,name=cvc_check,json=cvcCheck,proto3" json:"cvc_check,omitempty"`
}

func (x *PaymentMethod_Card_Checks) Reset() {
	*x = PaymentMethod_Card_Checks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_Card_Checks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_Card_Checks) ProtoMessage() {}

func (x *PaymentMethod_Card_Checks) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_Card_Checks.ProtoReflect.Descriptor instead.
func (*PaymentMethod_Card_Checks) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 3, 0}
}

func (x *PaymentMethod_Card_Checks) GetAddressLine1Check() string {
	if x != nil {
		return x.AddressLine1Check
	}
	return ""
}

func (x *PaymentMethod_Card_Checks) GetAddressPostalCodeCheck() string {
	if x != nil {
		return x.AddressPostalCodeCheck
	}
	return ""
}

func (x *PaymentMethod_Card_Checks) GetCvcCheck() string {
	if x != nil {
		return x.CvcCheck
	}
	return ""
}

// Billing address.
type PaymentMethod_BillingDetails_Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// City, district, suburb, town, or village.
	City string `protobuf:"bytes,1,opt,name=city,proto3" json:"city,omitempty"`
	// Two-letter country code (ISO 3166-1 alpha-2).
	Country string `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	// Address line 1 (e.g., street, PO Box, or company name).
	Line1 string `protobuf:"bytes,3,opt,name=line1,proto3" json:"line1,omitempty"`
	// Address line 2 (e.g., apartment, suite, unit, or building).
	Line2 string `protobuf:"bytes,4,opt,name=line2,proto3" json:"line2,omitempty"`
	// ZIP or postal code.
	PostalCode string `protobuf:"bytes,5,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// State, county, province, or region.
	State string `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *PaymentMethod_BillingDetails_Address) Reset() {
	*x = PaymentMethod_BillingDetails_Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_stripe_v1_payment_intents_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaymentMethod_BillingDetails_Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaymentMethod_BillingDetails_Address) ProtoMessage() {}

func (x *PaymentMethod_BillingDetails_Address) ProtoReflect() protoreflect.Message {
	mi := &file_stripe_v1_payment_intents_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaymentMethod_BillingDetails_Address.ProtoReflect.Descriptor instead.
func (*PaymentMethod_BillingDetails_Address) Descriptor() ([]byte, []int) {
	return file_stripe_v1_payment_intents_proto_rawDescGZIP(), []int{3, 4, 0}
}

func (x *PaymentMethod_BillingDetails_Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *PaymentMethod_BillingDetails_Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *PaymentMethod_BillingDetails_Address) GetLine1() string {
	if x != nil {
		return x.Line1
	}
	return ""
}

func (x *PaymentMethod_BillingDetails_Address) GetLine2() string {
	if x != nil {
		return x.Line2
	}
	return ""
}

func (x *PaymentMethod_BillingDetails_Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *PaymentMethod_BillingDetails_Address) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

var File_stripe_v1_payment_intents_proto protoreflect.FileDescriptor

var file_stripe_v1_payment_intents_proto_rawDesc = []byte{
	0x0a, 0x1f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x23, 0x0a, 0x0d,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2b, 0x0a,
	0x11, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x43, 0x61, 0x70, 0x74, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0d, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x63, 0x65, 0x69, 0x76,
	0x65, 0x64, 0x12, 0x25, 0x0a, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x16, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x14, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x65, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x48, 0x02, 0x52, 0x0a, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x65, 0x63,
	0x72, 0x65, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2f, 0x0a, 0x13, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1f,
	0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x03, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x57, 0x0a, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x69, 0x76,
	0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6c, 0x69,
	0x76, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x38, 0x0a, 0x0b, 0x6e, 0x65,
	0x78, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0c, 0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c,
	0x66, 0x5f, 0x6f, 0x66, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x05, 0x52, 0x0a, 0x6f, 0x6e,
	0x42, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x4f, 0x66, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x0e, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x88, 0x01, 0x01, 0x12, 0x8b, 0x01, 0x0a, 0x24, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x52, 0x21, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x63, 0x0a, 0x16, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x52, 0x14, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x28, 0x0a, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x07, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65,
	0x69, 0x70, 0x74, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x21, 0x0a, 0x09, 0x72,
	0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x08,
	0x52, 0x09, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1b,
	0x0a, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x06, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x13, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0b, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53,
	0x75, 0x66, 0x66, 0x69, 0x78, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x75,
	0x70, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x0c, 0x52, 0x10, 0x73, 0x65, 0x74, 0x75, 0x70, 0x46, 0x75, 0x74,
	0x75, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x08, 0x73,
	0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x1a, 0x6c, 0x0a, 0x0d, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x3c, 0x0a, 0x03, 0x74,
	0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x2e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x2e, 0x54, 0x69, 0x70, 0x52, 0x03, 0x74, 0x69, 0x70, 0x1a, 0x1d, 0x0a, 0x03, 0x54, 0x69, 0x70,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xaf, 0x02, 0x0a, 0x10, 0x4c, 0x61, 0x73,
	0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x63, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x17, 0x0a, 0x07, 0x64, 0x6f, 0x63, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x6f, 0x63, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x3f, 0x0a, 0x0e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x52, 0x0d, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x2e, 0x0a, 0x13, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x54, 0x79, 0x70, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4b, 0x0a, 0x21, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x1a, 0x91, 0x08, 0x0a, 0x14, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x1a, 0xb0, 0x07, 0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x25,
	0x0a, 0x0e, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x63, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x0c, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6a, 0x0a, 0x0f, 0x6d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x41, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x4d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x0e, 0x6d, 0x61, 0x6e, 0x64, 0x61, 0x74, 0x65, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x16, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x13, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x54, 0x68, 0x72, 0x65, 0x65, 0x44, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x31, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x10, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x88,
	0x01, 0x01, 0x12, 0x47, 0x0a, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x5f, 0x6b, 0x61, 0x6e, 0x61, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1d, 0x73, 0x74,
	0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f,
	0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x4b, 0x61, 0x6e, 0x61, 0x12, 0x49, 0x0a, 0x21, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x6b, 0x61, 0x6e, 0x6a, 0x69,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1e, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69,
	0x78, 0x4b, 0x61, 0x6e, 0x6a, 0x69, 0x1a, 0xbf, 0x02, 0x0a, 0x0c, 0x49, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x6d, 0x0a, 0x0f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x44, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x2e, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x0e, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x58, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x44,
	0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x2e,
	0x50, 0x6c, 0x61, 0x6e, 0x52, 0x04, 0x70, 0x6c, 0x61, 0x6e, 0x1a, 0x4c, 0x0a, 0x04, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x10, 0x0a, 0x0e, 0x4d, 0x61, 0x6e, 0x64,
	0x61, 0x74, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x65, 0x5f, 0x64, 0x5f, 0x73, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x75, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xe6, 0x02, 0x0a, 0x0a, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x52,
	0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x5f, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xe4, 0x01, 0x0a, 0x04, 0x43,
	0x61, 0x72, 0x64, 0x12, 0x72, 0x0a, 0x15, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x2e, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x68, 0x0a, 0x14, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x2d, 0x0a, 0x12, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x70, 0x70,
	0x72, 0x6f, 0x76, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x73, 0x41,
	0x74, 0x1a, 0xd9, 0x02, 0x0a, 0x08, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x43,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69,
	0x6e, 0x67, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65,
	0x72, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x1a, 0x9a, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73,
	0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x1a, 0x48, 0x0a,
	0x0c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x19, 0x0a, 0x17, 0x5f, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x65, 0x65, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x42,
	0x0a, 0x0a, 0x08, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x6e, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x6c, 0x66, 0x5f, 0x6f, 0x66, 0x42, 0x11, 0x0a, 0x0f,
	0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x42,
	0x10, 0x0a, 0x0e, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x72, 0x65, 0x64, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66,
	0x66, 0x69, 0x78, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x75,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x22, 0xfd, 0x07,
	0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79,
	0x12, 0x79, 0x0a, 0x19, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x75, 0x74, 0x6f, 0x6d,
	0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x73, 0x52, 0x17, 0x61, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x4f, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x1f, 0x0a, 0x0b, 0x6f, 0x66, 0x66, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6f, 0x66, 0x66, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x5f, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x23, 0x0a, 0x0d,
	0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x65, 0x69, 0x70, 0x74, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x2c, 0x0a, 0x12, 0x73, 0x65, 0x74, 0x75, 0x70, 0x5f, 0x66, 0x75, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x73,
	0x65, 0x74, 0x75, 0x70, 0x46, 0x75, 0x74, 0x75, 0x72, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x4a, 0x0a, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x52, 0x08, 0x73, 0x68, 0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x14, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x12, 0x3e,
	0x0a, 0x1b, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x75, 0x66, 0x66, 0x69, 0x78, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x19, 0x73, 0x74, 0x61, 0x74, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x53, 0x75, 0x66, 0x66, 0x69, 0x78, 0x1a, 0x5c,
	0x0a, 0x17, 0x41, 0x75, 0x74, 0x6f, 0x6d, 0x61, 0x74, 0x69, 0x63, 0x50, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x73, 0x1a, 0x3b, 0x0a, 0x0d,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x91, 0x01, 0x0a, 0x08, 0x53, 0x68,
	0x69, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x61, 0x72, 0x72, 0x69, 0x65, 0x72, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x29, 0x0a,
	0x17, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x88, 0x0f, 0x0a, 0x0d, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x61, 0x63, 0x73, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x2e, 0x41, 0x43, 0x53, 0x53, 0x44, 0x65, 0x62, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x61, 0x63,
	0x73, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x66, 0x66, 0x69, 0x72,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x48, 0x00, 0x52, 0x06, 0x61, 0x66, 0x66, 0x69, 0x72, 0x6d, 0x12, 0x46, 0x0a, 0x11, 0x61, 0x66,
	0x74, 0x65, 0x72, 0x70, 0x61, 0x79, 0x5f, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x70, 0x61, 0x79, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00,
	0x52, 0x10, 0x61, 0x66, 0x74, 0x65, 0x72, 0x70, 0x61, 0x79, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x70,
	0x61, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x61, 0x6c, 0x69, 0x70, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x6c, 0x69, 0x70, 0x61, 0x79, 0x12, 0x4a, 0x0a, 0x0d, 0x61, 0x75, 0x5f, 0x62, 0x65, 0x63, 0x73,
	0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x41, 0x75, 0x42, 0x65, 0x63, 0x73, 0x44, 0x65, 0x62,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x61, 0x75, 0x42, 0x65, 0x63, 0x73, 0x44, 0x65, 0x62, 0x69,
	0x74, 0x12, 0x43, 0x0a, 0x0a, 0x62, 0x61, 0x63, 0x73, 0x5f, 0x64, 0x65, 0x62, 0x69, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e,
	0x42, 0x61, 0x63, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74, 0x48, 0x00, 0x52, 0x09, 0x62, 0x61, 0x63,
	0x73, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x61, 0x6e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x12, 0x33, 0x0a, 0x04, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x04, 0x63, 0x61, 0x72, 0x64, 0x12, 0x50, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0xb6, 0x01, 0x0a,
	0x09, 0x41, 0x43, 0x53, 0x53, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61,
	0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62,
	0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69,
	0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x73,
	0x74, 0x69, 0x74, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x73, 0x74, 0x69, 0x74, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x73, 0x74,
	0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x73, 0x74, 0x34, 0x12, 0x25,
	0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x69, 0x74, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x1a, 0x64, 0x0a, 0x0b, 0x41, 0x75, 0x42, 0x65, 0x63, 0x73, 0x44,
	0x65, 0x62, 0x69, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x73, 0x62, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x73, 0x62, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72,
	0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x73, 0x74, 0x34, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x73, 0x74, 0x34, 0x1a, 0x60, 0x0a, 0x09, 0x42,
	0x61, 0x63, 0x73, 0x44, 0x65, 0x62, 0x69, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67,
	0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66,
	0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61,
	0x73, 0x74, 0x34, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x73, 0x74, 0x34,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x1a, 0xa6, 0x04,
	0x0a, 0x04, 0x43, 0x61, 0x72, 0x64, 0x12, 0x39, 0x0a, 0x05, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e,
	0x43, 0x61, 0x72, 0x64, 0x2e, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x52, 0x05, 0x62, 0x72, 0x61, 0x6e,
	0x64, 0x12, 0x3c, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x70,
	0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78,
	0x70, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x78, 0x70, 0x5f, 0x79, 0x65,
	0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x78, 0x70, 0x59, 0x65, 0x61,
	0x72, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x75, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x1a, 0x90, 0x01,
	0x0a, 0x06, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x69,
	0x6e, 0x65, 0x31, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f,
	0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x76, 0x63, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x76, 0x63, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x22, 0x83, 0x01, 0x0a, 0x05, 0x42, 0x72, 0x61, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x42, 0x52, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x61, 0x6d, 0x65, 0x78, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x64, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x65, 0x66, 0x74, 0x70, 0x6f, 0x73,
	0x5f, 0x61, 0x75, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x6a, 0x63, 0x62, 0x10, 0x05, 0x12, 0x0e,
	0x0a, 0x0a, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x63, 0x61, 0x72, 0x64, 0x10, 0x06, 0x12, 0x0c,
	0x0a, 0x08, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x70, 0x61, 0x79, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04,
	0x76, 0x69, 0x73, 0x61, 0x10, 0x08, 0x1a, 0xb8, 0x02, 0x0a, 0x0e, 0x42, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x2e, 0x42, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x1a, 0x9a, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6e, 0x65, 0x31, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x65, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x6f,
	0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x65, 0x42, 0x10, 0x0a, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x32, 0x83, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x73, 0x0a,
	0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74,
	0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x13, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x75, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x73, 0x74, 0x72,
	0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x12, 0x18, 0x2f, 0x76,
	0x31, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x73, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x90, 0x02, 0x01, 0x42, 0xa2, 0x01, 0x0a, 0x0d, 0x63, 0x6f,
	0x6d, 0x2e, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x13, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x50, 0x01, 0x5a, 0x37, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x72, 0x70, 0x63, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x76, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x72, 0x64, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2f,
	0x76, 0x31, 0x3b, 0x73, 0x74, 0x72, 0x69, 0x70, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x58,
	0x58, 0xaa, 0x02, 0x09, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x09,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x15, 0x53, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0xea, 0x02, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_stripe_v1_payment_intents_proto_rawDescOnce sync.Once
	file_stripe_v1_payment_intents_proto_rawDescData = file_stripe_v1_payment_intents_proto_rawDesc
)

func file_stripe_v1_payment_intents_proto_rawDescGZIP() []byte {
	file_stripe_v1_payment_intents_proto_rawDescOnce.Do(func() {
		file_stripe_v1_payment_intents_proto_rawDescData = protoimpl.X.CompressGZIP(file_stripe_v1_payment_intents_proto_rawDescData)
	})
	return file_stripe_v1_payment_intents_proto_rawDescData
}

var file_stripe_v1_payment_intents_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_stripe_v1_payment_intents_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_stripe_v1_payment_intents_proto_goTypes = []interface{}{
	(PaymentMethod_Card_Brand)(0),          // 0: stripe.v1.PaymentMethod.Card.Brand
	(*PaymentIntent)(nil),                  // 1: stripe.v1.PaymentIntent
	(*CreatePaymentIntentRequest)(nil),     // 2: stripe.v1.CreatePaymentIntentRequest
	(*GetPaymentIntentRequest)(nil),        // 3: stripe.v1.GetPaymentIntentRequest
	(*PaymentMethod)(nil),                  // 4: stripe.v1.PaymentMethod
	(*PaymentIntent_AmountDetails)(nil),    // 5: stripe.v1.PaymentIntent.AmountDetails
	(*PaymentIntent_LastPaymentError)(nil), // 6: stripe.v1.PaymentIntent.LastPaymentError
	nil,                                    // 7: stripe.v1.PaymentIntent.MetadataEntry
	(*PaymentIntent_PaymentMethodConfigurationDetails)(nil),           // 8: stripe.v1.PaymentIntent.PaymentMethodConfigurationDetails
	(*PaymentIntent_PaymentMethodOptions)(nil),                        // 9: stripe.v1.PaymentIntent.PaymentMethodOptions
	(*PaymentIntent_Processing)(nil),                                  // 10: stripe.v1.PaymentIntent.Processing
	(*PaymentIntent_Shipping)(nil),                                    // 11: stripe.v1.PaymentIntent.Shipping
	(*PaymentIntent_TransferData)(nil),                                // 12: stripe.v1.PaymentIntent.TransferData
	(*PaymentIntent_AmountDetails_Tip)(nil),                           // 13: stripe.v1.PaymentIntent.AmountDetails.Tip
	(*PaymentIntent_PaymentMethodOptions_Card)(nil),                   // 14: stripe.v1.PaymentIntent.PaymentMethodOptions.Card
	(*PaymentIntent_PaymentMethodOptions_Card_Installments)(nil),      // 15: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments
	(*PaymentIntent_PaymentMethodOptions_Card_MandateOptions)(nil),    // 16: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.MandateOptions
	(*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan)(nil), // 17: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan
	(*PaymentIntent_Processing_Card)(nil),                             // 18: stripe.v1.PaymentIntent.Processing.Card
	(*PaymentIntent_Processing_Card_CustomerNotification)(nil),        // 19: stripe.v1.PaymentIntent.Processing.Card.CustomerNotification
	(*PaymentIntent_Shipping_Address)(nil),                            // 20: stripe.v1.PaymentIntent.Shipping.Address
	(*CreatePaymentIntentRequest_AutomaticPaymentMethods)(nil),        // 21: stripe.v1.CreatePaymentIntentRequest.AutomaticPaymentMethods
	nil, // 22: stripe.v1.CreatePaymentIntentRequest.MetadataEntry
	(*CreatePaymentIntentRequest_Shipping)(nil),  // 23: stripe.v1.CreatePaymentIntentRequest.Shipping
	(*PaymentMethod_ACSSDebit)(nil),              // 24: stripe.v1.PaymentMethod.ACSSDebit
	(*PaymentMethod_AuBecsDebit)(nil),            // 25: stripe.v1.PaymentMethod.AuBecsDebit
	(*PaymentMethod_BacsDebit)(nil),              // 26: stripe.v1.PaymentMethod.BacsDebit
	(*PaymentMethod_Card)(nil),                   // 27: stripe.v1.PaymentMethod.Card
	(*PaymentMethod_BillingDetails)(nil),         // 28: stripe.v1.PaymentMethod.BillingDetails
	(*PaymentMethod_Card_Checks)(nil),            // 29: stripe.v1.PaymentMethod.Card.Checks
	(*PaymentMethod_BillingDetails_Address)(nil), // 30: stripe.v1.PaymentMethod.BillingDetails.Address
	(*structpb.Struct)(nil),                      // 31: google.protobuf.Struct
}
var file_stripe_v1_payment_intents_proto_depIdxs = []int32{
	5,  // 0: stripe.v1.PaymentIntent.amount_details:type_name -> stripe.v1.PaymentIntent.AmountDetails
	6,  // 1: stripe.v1.PaymentIntent.last_payment_error:type_name -> stripe.v1.PaymentIntent.LastPaymentError
	7,  // 2: stripe.v1.PaymentIntent.metadata:type_name -> stripe.v1.PaymentIntent.MetadataEntry
	31, // 3: stripe.v1.PaymentIntent.next_action:type_name -> google.protobuf.Struct
	8,  // 4: stripe.v1.PaymentIntent.payment_method_configuration_details:type_name -> stripe.v1.PaymentIntent.PaymentMethodConfigurationDetails
	9,  // 5: stripe.v1.PaymentIntent.payment_method_options:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions
	10, // 6: stripe.v1.PaymentIntent.processing:type_name -> stripe.v1.PaymentIntent.Processing
	11, // 7: stripe.v1.PaymentIntent.shipping:type_name -> stripe.v1.PaymentIntent.Shipping
	12, // 8: stripe.v1.PaymentIntent.transfer_data:type_name -> stripe.v1.PaymentIntent.TransferData
	21, // 9: stripe.v1.CreatePaymentIntentRequest.automatic_payment_methods:type_name -> stripe.v1.CreatePaymentIntentRequest.AutomaticPaymentMethods
	22, // 10: stripe.v1.CreatePaymentIntentRequest.metadata:type_name -> stripe.v1.CreatePaymentIntentRequest.MetadataEntry
	23, // 11: stripe.v1.CreatePaymentIntentRequest.shipping:type_name -> stripe.v1.CreatePaymentIntentRequest.Shipping
	24, // 12: stripe.v1.PaymentMethod.acss_debit:type_name -> stripe.v1.PaymentMethod.ACSSDebit
	31, // 13: stripe.v1.PaymentMethod.affirm:type_name -> google.protobuf.Struct
	31, // 14: stripe.v1.PaymentMethod.afterpay_clearpay:type_name -> google.protobuf.Struct
	31, // 15: stripe.v1.PaymentMethod.alipay:type_name -> google.protobuf.Struct
	25, // 16: stripe.v1.PaymentMethod.au_becs_debit:type_name -> stripe.v1.PaymentMethod.AuBecsDebit
	26, // 17: stripe.v1.PaymentMethod.bacs_debit:type_name -> stripe.v1.PaymentMethod.BacsDebit
	31, // 18: stripe.v1.PaymentMethod.bancontact:type_name -> google.protobuf.Struct
	27, // 19: stripe.v1.PaymentMethod.card:type_name -> stripe.v1.PaymentMethod.Card
	28, // 20: stripe.v1.PaymentMethod.billing_details:type_name -> stripe.v1.PaymentMethod.BillingDetails
	13, // 21: stripe.v1.PaymentIntent.AmountDetails.tip:type_name -> stripe.v1.PaymentIntent.AmountDetails.Tip
	4,  // 22: stripe.v1.PaymentIntent.LastPaymentError.payment_method:type_name -> stripe.v1.PaymentMethod
	14, // 23: stripe.v1.PaymentIntent.PaymentMethodOptions.card:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions.Card
	18, // 24: stripe.v1.PaymentIntent.Processing.card:type_name -> stripe.v1.PaymentIntent.Processing.Card
	20, // 25: stripe.v1.PaymentIntent.Shipping.address:type_name -> stripe.v1.PaymentIntent.Shipping.Address
	15, // 26: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.installments:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments
	16, // 27: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.mandate_options:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions.Card.MandateOptions
	17, // 28: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments.available_plans:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan
	17, // 29: stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments.plan:type_name -> stripe.v1.PaymentIntent.PaymentMethodOptions.Card.Installments.Plan
	19, // 30: stripe.v1.PaymentIntent.Processing.Card.customer_notification:type_name -> stripe.v1.PaymentIntent.Processing.Card.CustomerNotification
	0,  // 31: stripe.v1.PaymentMethod.Card.brand:type_name -> stripe.v1.PaymentMethod.Card.Brand
	29, // 32: stripe.v1.PaymentMethod.Card.checks:type_name -> stripe.v1.PaymentMethod.Card.Checks
	30, // 33: stripe.v1.PaymentMethod.BillingDetails.address:type_name -> stripe.v1.PaymentMethod.BillingDetails.Address
	2,  // 34: stripe.v1.PaymentIntentsService.CreatePaymentIntent:input_type -> stripe.v1.CreatePaymentIntentRequest
	3,  // 35: stripe.v1.PaymentIntentsService.GetPaymentIntent:input_type -> stripe.v1.GetPaymentIntentRequest
	1,  // 36: stripe.v1.PaymentIntentsService.CreatePaymentIntent:output_type -> stripe.v1.PaymentIntent
	1,  // 37: stripe.v1.PaymentIntentsService.GetPaymentIntent:output_type -> stripe.v1.PaymentIntent
	36, // [36:38] is the sub-list for method output_type
	34, // [34:36] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_stripe_v1_payment_intents_proto_init() }
func file_stripe_v1_payment_intents_proto_init() {
	if File_stripe_v1_payment_intents_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_stripe_v1_payment_intents_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetPaymentIntentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_AmountDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_LastPaymentError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodConfigurationDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_Processing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_Shipping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_TransferData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_AmountDetails_Tip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodOptions_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodOptions_Card_Installments); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodOptions_Card_MandateOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_PaymentMethodOptions_Card_Installments_Plan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_Processing_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_Processing_Card_CustomerNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentIntent_Shipping_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentIntentRequest_AutomaticPaymentMethods); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatePaymentIntentRequest_Shipping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_ACSSDebit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_AuBecsDebit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_BacsDebit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_Card); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_BillingDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_Card_Checks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_stripe_v1_payment_intents_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaymentMethod_BillingDetails_Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_stripe_v1_payment_intents_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_stripe_v1_payment_intents_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*PaymentMethod_AcssDebit)(nil),
		(*PaymentMethod_Affirm)(nil),
		(*PaymentMethod_AfterpayClearpay)(nil),
		(*PaymentMethod_Alipay)(nil),
		(*PaymentMethod_AuBecsDebit_)(nil),
		(*PaymentMethod_BacsDebit_)(nil),
		(*PaymentMethod_Bancontact)(nil),
		(*PaymentMethod_Card_)(nil),
	}
	file_stripe_v1_payment_intents_proto_msgTypes[13].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_stripe_v1_payment_intents_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_stripe_v1_payment_intents_proto_goTypes,
		DependencyIndexes: file_stripe_v1_payment_intents_proto_depIdxs,
		EnumInfos:         file_stripe_v1_payment_intents_proto_enumTypes,
		MessageInfos:      file_stripe_v1_payment_intents_proto_msgTypes,
	}.Build()
	File_stripe_v1_payment_intents_proto = out.File
	file_stripe_v1_payment_intents_proto_rawDesc = nil
	file_stripe_v1_payment_intents_proto_goTypes = nil
	file_stripe_v1_payment_intents_proto_depIdxs = nil
}
