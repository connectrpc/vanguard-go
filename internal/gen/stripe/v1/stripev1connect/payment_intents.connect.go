// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: stripe/v1/payment_intents.proto

package stripev1connect

import (
	connect "connectrpc.com/connect"
	v1 "connectrpc.com/vanguard/internal/gen/stripe/v1"
	context "context"
	errors "errors"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_7_0

const (
	// PaymentIntentsServiceName is the fully-qualified name of the PaymentIntentsService service.
	PaymentIntentsServiceName = "stripe.v1.PaymentIntentsService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PaymentIntentsServiceCreatePaymentIntentProcedure is the fully-qualified name of the
	// PaymentIntentsService's CreatePaymentIntent RPC.
	PaymentIntentsServiceCreatePaymentIntentProcedure = "/stripe.v1.PaymentIntentsService/CreatePaymentIntent"
	// PaymentIntentsServiceGetPaymentIntentProcedure is the fully-qualified name of the
	// PaymentIntentsService's GetPaymentIntent RPC.
	PaymentIntentsServiceGetPaymentIntentProcedure = "/stripe.v1.PaymentIntentsService/GetPaymentIntent"
)

// PaymentIntentsServiceClient is a client for the stripe.v1.PaymentIntentsService service.
type PaymentIntentsServiceClient interface {
	// Creates a PaymentIntent object.
	CreatePaymentIntent(context.Context, *connect.Request[v1.CreatePaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error)
	// Retrieves the details of a PaymentIntent that has previously been created.
	GetPaymentIntent(context.Context, *connect.Request[v1.GetPaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error)
}

// NewPaymentIntentsServiceClient constructs a client for the stripe.v1.PaymentIntentsService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPaymentIntentsServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PaymentIntentsServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &paymentIntentsServiceClient{
		createPaymentIntent: connect.NewClient[v1.CreatePaymentIntentRequest, v1.PaymentIntent](
			httpClient,
			baseURL+PaymentIntentsServiceCreatePaymentIntentProcedure,
			opts...,
		),
		getPaymentIntent: connect.NewClient[v1.GetPaymentIntentRequest, v1.PaymentIntent](
			httpClient,
			baseURL+PaymentIntentsServiceGetPaymentIntentProcedure,
			connect.WithIdempotency(connect.IdempotencyNoSideEffects),
			connect.WithClientOptions(opts...),
		),
	}
}

// paymentIntentsServiceClient implements PaymentIntentsServiceClient.
type paymentIntentsServiceClient struct {
	createPaymentIntent *connect.Client[v1.CreatePaymentIntentRequest, v1.PaymentIntent]
	getPaymentIntent    *connect.Client[v1.GetPaymentIntentRequest, v1.PaymentIntent]
}

// CreatePaymentIntent calls stripe.v1.PaymentIntentsService.CreatePaymentIntent.
func (c *paymentIntentsServiceClient) CreatePaymentIntent(ctx context.Context, req *connect.Request[v1.CreatePaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error) {
	return c.createPaymentIntent.CallUnary(ctx, req)
}

// GetPaymentIntent calls stripe.v1.PaymentIntentsService.GetPaymentIntent.
func (c *paymentIntentsServiceClient) GetPaymentIntent(ctx context.Context, req *connect.Request[v1.GetPaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error) {
	return c.getPaymentIntent.CallUnary(ctx, req)
}

// PaymentIntentsServiceHandler is an implementation of the stripe.v1.PaymentIntentsService service.
type PaymentIntentsServiceHandler interface {
	// Creates a PaymentIntent object.
	CreatePaymentIntent(context.Context, *connect.Request[v1.CreatePaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error)
	// Retrieves the details of a PaymentIntent that has previously been created.
	GetPaymentIntent(context.Context, *connect.Request[v1.GetPaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error)
}

// NewPaymentIntentsServiceHandler builds an HTTP handler from the service implementation. It
// returns the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPaymentIntentsServiceHandler(svc PaymentIntentsServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	paymentIntentsServiceCreatePaymentIntentHandler := connect.NewUnaryHandler(
		PaymentIntentsServiceCreatePaymentIntentProcedure,
		svc.CreatePaymentIntent,
		opts...,
	)
	paymentIntentsServiceGetPaymentIntentHandler := connect.NewUnaryHandler(
		PaymentIntentsServiceGetPaymentIntentProcedure,
		svc.GetPaymentIntent,
		connect.WithIdempotency(connect.IdempotencyNoSideEffects),
		connect.WithHandlerOptions(opts...),
	)
	return "/stripe.v1.PaymentIntentsService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PaymentIntentsServiceCreatePaymentIntentProcedure:
			paymentIntentsServiceCreatePaymentIntentHandler.ServeHTTP(w, r)
		case PaymentIntentsServiceGetPaymentIntentProcedure:
			paymentIntentsServiceGetPaymentIntentHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPaymentIntentsServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPaymentIntentsServiceHandler struct{}

func (UnimplementedPaymentIntentsServiceHandler) CreatePaymentIntent(context.Context, *connect.Request[v1.CreatePaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stripe.v1.PaymentIntentsService.CreatePaymentIntent is not implemented"))
}

func (UnimplementedPaymentIntentsServiceHandler) GetPaymentIntent(context.Context, *connect.Request[v1.GetPaymentIntentRequest]) (*connect.Response[v1.PaymentIntent], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("stripe.v1.PaymentIntentsService.GetPaymentIntent is not implemented"))
}
