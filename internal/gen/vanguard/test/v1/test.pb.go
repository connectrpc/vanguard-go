// Copyright 2023-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        (unknown)
// source: vanguard/test/v1/test.proto

package testv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// enum types
type ParameterValues_Enum int32

const (
	ParameterValues_ENUM_UNSPECIFIED ParameterValues_Enum = 0
	ParameterValues_ENUM_VALUE       ParameterValues_Enum = 1
)

// Enum value maps for ParameterValues_Enum.
var (
	ParameterValues_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ParameterValues_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ParameterValues_Enum) Enum() *ParameterValues_Enum {
	p := new(ParameterValues_Enum)
	*p = x
	return p
}

func (x ParameterValues_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterValues_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_vanguard_test_v1_test_proto_enumTypes[0].Descriptor()
}

func (ParameterValues_Enum) Type() protoreflect.EnumType {
	return &file_vanguard_test_v1_test_proto_enumTypes[0]
}

func (x ParameterValues_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterValues_Enum.Descriptor instead.
func (ParameterValues_Enum) EnumDescriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0}
}

type ParameterValues_Nested_Enum int32

const (
	ParameterValues_Nested_ENUM_UNSPECIFIED ParameterValues_Nested_Enum = 0
	ParameterValues_Nested_ENUM_VALUE       ParameterValues_Nested_Enum = 1
)

// Enum value maps for ParameterValues_Nested_Enum.
var (
	ParameterValues_Nested_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_VALUE",
	}
	ParameterValues_Nested_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_VALUE":       1,
	}
)

func (x ParameterValues_Nested_Enum) Enum() *ParameterValues_Nested_Enum {
	p := new(ParameterValues_Nested_Enum)
	*p = x
	return p
}

func (x ParameterValues_Nested_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ParameterValues_Nested_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_vanguard_test_v1_test_proto_enumTypes[1].Descriptor()
}

func (ParameterValues_Nested_Enum) Type() protoreflect.EnumType {
	return &file_vanguard_test_v1_test_proto_enumTypes[1]
}

func (x ParameterValues_Nested_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParameterValues_Nested_Enum.Descriptor instead.
func (ParameterValues_Nested_Enum) EnumDescriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0, 0}
}

// named types
type AllTypes_Enum int32

const (
	AllTypes_ENUM_UNSPECIFIED AllTypes_Enum = 0
	AllTypes_ENUM_ONE         AllTypes_Enum = 1
	AllTypes_ENUM_TWO         AllTypes_Enum = 2
)

// Enum value maps for AllTypes_Enum.
var (
	AllTypes_Enum_name = map[int32]string{
		0: "ENUM_UNSPECIFIED",
		1: "ENUM_ONE",
		2: "ENUM_TWO",
	}
	AllTypes_Enum_value = map[string]int32{
		"ENUM_UNSPECIFIED": 0,
		"ENUM_ONE":         1,
		"ENUM_TWO":         2,
	}
)

func (x AllTypes_Enum) Enum() *AllTypes_Enum {
	p := new(AllTypes_Enum)
	*p = x
	return p
}

func (x AllTypes_Enum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AllTypes_Enum) Descriptor() protoreflect.EnumDescriptor {
	return file_vanguard_test_v1_test_proto_enumTypes[2].Descriptor()
}

func (AllTypes_Enum) Type() protoreflect.EnumType {
	return &file_vanguard_test_v1_test_proto_enumTypes[2]
}

func (x AllTypes_Enum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AllTypes_Enum.Descriptor instead.
func (AllTypes_Enum) EnumDescriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{1, 0}
}

type ParameterValues struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// scalar types
	DoubleValue   float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue    float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue     bool    `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string  `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue    []byte  `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	// scalar wrappers
	Timestamp          *timestamppb.Timestamp  `protobuf:"bytes,16,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Duration           *durationpb.Duration    `protobuf:"bytes,17,opt,name=duration,proto3" json:"duration,omitempty"`
	BoolValueWrapper   *wrapperspb.BoolValue   `protobuf:"bytes,18,opt,name=bool_value_wrapper,json=boolValueWrapper,proto3" json:"bool_value_wrapper,omitempty"`
	Int32ValueWrapper  *wrapperspb.Int32Value  `protobuf:"bytes,19,opt,name=int32_value_wrapper,json=int32ValueWrapper,proto3" json:"int32_value_wrapper,omitempty"`
	Int64ValueWrapper  *wrapperspb.Int64Value  `protobuf:"bytes,20,opt,name=int64_value_wrapper,json=int64ValueWrapper,proto3" json:"int64_value_wrapper,omitempty"`
	Uint32ValueWrapper *wrapperspb.UInt32Value `protobuf:"bytes,21,opt,name=uint32_value_wrapper,json=uint32ValueWrapper,proto3" json:"uint32_value_wrapper,omitempty"`
	Uint64ValueWrapper *wrapperspb.UInt64Value `protobuf:"bytes,22,opt,name=uint64_value_wrapper,json=uint64ValueWrapper,proto3" json:"uint64_value_wrapper,omitempty"`
	FloatValueWrapper  *wrapperspb.FloatValue  `protobuf:"bytes,23,opt,name=float_value_wrapper,json=floatValueWrapper,proto3" json:"float_value_wrapper,omitempty"`
	DoubleValueWrapper *wrapperspb.DoubleValue `protobuf:"bytes,24,opt,name=double_value_wrapper,json=doubleValueWrapper,proto3" json:"double_value_wrapper,omitempty"`
	BytesValueWrapper  *wrapperspb.BytesValue  `protobuf:"bytes,25,opt,name=bytes_value_wrapper,json=bytesValueWrapper,proto3" json:"bytes_value_wrapper,omitempty"`
	StringValueWrapper *wrapperspb.StringValue `protobuf:"bytes,26,opt,name=string_value_wrapper,json=stringValueWrapper,proto3" json:"string_value_wrapper,omitempty"`
	FieldMask          *fieldmaskpb.FieldMask  `protobuf:"bytes,27,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	EnumValue          ParameterValues_Enum    `protobuf:"varint,28,opt,name=enum_value,json=enumValue,proto3,enum=vanguard.test.v1.ParameterValues_Enum" json:"enum_value,omitempty"`
	// complex types
	EnumList        []ParameterValues_Enum    `protobuf:"varint,29,rep,packed,name=enum_list,json=enumList,proto3,enum=vanguard.test.v1.ParameterValues_Enum" json:"enum_list,omitempty"`
	DoubleList      []float64                 `protobuf:"fixed64,30,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	DoubleValueList []*wrapperspb.DoubleValue `protobuf:"bytes,31,rep,name=double_value_list,json=doubleValueList,proto3" json:"double_value_list,omitempty"`
	// Types that are valid to be assigned to Oneof:
	//
	//	*ParameterValues_OneofDoubleValue
	//	*ParameterValues_OneofDoubleValueWrapper
	//	*ParameterValues_OneofEnumValue
	Oneof     isParameterValues_Oneof `protobuf_oneof:"oneof"`
	Nested    *ParameterValues_Nested `protobuf:"bytes,36,opt,name=nested,proto3" json:"nested,omitempty"`
	Recursive *ParameterValues        `protobuf:"bytes,37,opt,name=recursive,proto3" json:"recursive,omitempty"`
	// unsupported
	StringMap      map[string]string                  `protobuf:"bytes,38,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringValueMap map[string]*wrapperspb.StringValue `protobuf:"bytes,39,rep,name=string_value_map,json=stringValueMap,proto3" json:"string_value_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EnumMap        map[string]ParameterValues_Enum    `protobuf:"bytes,40,rep,name=enum_map,json=enumMap,proto3" json:"enum_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=vanguard.test.v1.ParameterValues_Enum"`
	NestedMap      map[string]*ParameterValues_Nested `protobuf:"bytes,41,rep,name=nested_map,json=nestedMap,proto3" json:"nested_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StructValue    *structpb.Struct                   `protobuf:"bytes,42,opt,name=struct_value,json=structValue,proto3" json:"struct_value,omitempty"`
	Value          *structpb.Value                    `protobuf:"bytes,43,opt,name=value,proto3" json:"value,omitempty"`
	RecursiveList  []*ParameterValues                 `protobuf:"bytes,44,rep,name=recursive_list,json=recursiveList,proto3" json:"recursive_list,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ParameterValues) Reset() {
	*x = ParameterValues{}
	mi := &file_vanguard_test_v1_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterValues) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValues) ProtoMessage() {}

func (x *ParameterValues) ProtoReflect() protoreflect.Message {
	mi := &file_vanguard_test_v1_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValues.ProtoReflect.Descriptor instead.
func (*ParameterValues) Descriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0}
}

func (x *ParameterValues) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ParameterValues) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *ParameterValues) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *ParameterValues) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *ParameterValues) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *ParameterValues) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *ParameterValues) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *ParameterValues) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *ParameterValues) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *ParameterValues) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *ParameterValues) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *ParameterValues) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *ParameterValues) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *ParameterValues) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *ParameterValues) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *ParameterValues) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *ParameterValues) GetDuration() *durationpb.Duration {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *ParameterValues) GetBoolValueWrapper() *wrapperspb.BoolValue {
	if x != nil {
		return x.BoolValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetInt32ValueWrapper() *wrapperspb.Int32Value {
	if x != nil {
		return x.Int32ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetInt64ValueWrapper() *wrapperspb.Int64Value {
	if x != nil {
		return x.Int64ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetUint32ValueWrapper() *wrapperspb.UInt32Value {
	if x != nil {
		return x.Uint32ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetUint64ValueWrapper() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Uint64ValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetFloatValueWrapper() *wrapperspb.FloatValue {
	if x != nil {
		return x.FloatValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetBytesValueWrapper() *wrapperspb.BytesValue {
	if x != nil {
		return x.BytesValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetStringValueWrapper() *wrapperspb.StringValue {
	if x != nil {
		return x.StringValueWrapper
	}
	return nil
}

func (x *ParameterValues) GetFieldMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *ParameterValues) GetEnumValue() ParameterValues_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ParameterValues_ENUM_UNSPECIFIED
}

func (x *ParameterValues) GetEnumList() []ParameterValues_Enum {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *ParameterValues) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *ParameterValues) GetDoubleValueList() []*wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueList
	}
	return nil
}

func (x *ParameterValues) GetOneof() isParameterValues_Oneof {
	if x != nil {
		return x.Oneof
	}
	return nil
}

func (x *ParameterValues) GetOneofDoubleValue() float64 {
	if x != nil {
		if x, ok := x.Oneof.(*ParameterValues_OneofDoubleValue); ok {
			return x.OneofDoubleValue
		}
	}
	return 0
}

func (x *ParameterValues) GetOneofDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		if x, ok := x.Oneof.(*ParameterValues_OneofDoubleValueWrapper); ok {
			return x.OneofDoubleValueWrapper
		}
	}
	return nil
}

func (x *ParameterValues) GetOneofEnumValue() ParameterValues_Enum {
	if x != nil {
		if x, ok := x.Oneof.(*ParameterValues_OneofEnumValue); ok {
			return x.OneofEnumValue
		}
	}
	return ParameterValues_ENUM_UNSPECIFIED
}

func (x *ParameterValues) GetNested() *ParameterValues_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

func (x *ParameterValues) GetRecursive() *ParameterValues {
	if x != nil {
		return x.Recursive
	}
	return nil
}

func (x *ParameterValues) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *ParameterValues) GetStringValueMap() map[string]*wrapperspb.StringValue {
	if x != nil {
		return x.StringValueMap
	}
	return nil
}

func (x *ParameterValues) GetEnumMap() map[string]ParameterValues_Enum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

func (x *ParameterValues) GetNestedMap() map[string]*ParameterValues_Nested {
	if x != nil {
		return x.NestedMap
	}
	return nil
}

func (x *ParameterValues) GetStructValue() *structpb.Struct {
	if x != nil {
		return x.StructValue
	}
	return nil
}

func (x *ParameterValues) GetValue() *structpb.Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ParameterValues) GetRecursiveList() []*ParameterValues {
	if x != nil {
		return x.RecursiveList
	}
	return nil
}

type isParameterValues_Oneof interface {
	isParameterValues_Oneof()
}

type ParameterValues_OneofDoubleValue struct {
	OneofDoubleValue float64 `protobuf:"fixed64,33,opt,name=oneof_double_value,json=oneofDoubleValue,proto3,oneof"`
}

type ParameterValues_OneofDoubleValueWrapper struct {
	OneofDoubleValueWrapper *wrapperspb.DoubleValue `protobuf:"bytes,34,opt,name=oneof_double_value_wrapper,json=oneofDoubleValueWrapper,proto3,oneof"`
}

type ParameterValues_OneofEnumValue struct {
	OneofEnumValue ParameterValues_Enum `protobuf:"varint,35,opt,name=oneof_enum_value,json=oneofEnumValue,proto3,enum=vanguard.test.v1.ParameterValues_Enum,oneof"`
}

func (*ParameterValues_OneofDoubleValue) isParameterValues_Oneof() {}

func (*ParameterValues_OneofDoubleValueWrapper) isParameterValues_Oneof() {}

func (*ParameterValues_OneofEnumValue) isParameterValues_Oneof() {}

type AllTypes struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// scalar types
	DoubleValue   float64 `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	FloatValue    float32 `protobuf:"fixed32,2,opt,name=float_value,json=floatValue,proto3" json:"float_value,omitempty"`
	Int32Value    int32   `protobuf:"varint,3,opt,name=int32_value,json=int32Value,proto3" json:"int32_value,omitempty"`
	Int64Value    int64   `protobuf:"varint,4,opt,name=int64_value,json=int64Value,proto3" json:"int64_value,omitempty"`
	Uint32Value   uint32  `protobuf:"varint,5,opt,name=uint32_value,json=uint32Value,proto3" json:"uint32_value,omitempty"`
	Uint64Value   uint64  `protobuf:"varint,6,opt,name=uint64_value,json=uint64Value,proto3" json:"uint64_value,omitempty"`
	Sint32Value   int32   `protobuf:"zigzag32,7,opt,name=sint32_value,json=sint32Value,proto3" json:"sint32_value,omitempty"`
	Sint64Value   int64   `protobuf:"zigzag64,8,opt,name=sint64_value,json=sint64Value,proto3" json:"sint64_value,omitempty"`
	Fixed32Value  uint32  `protobuf:"fixed32,9,opt,name=fixed32_value,json=fixed32Value,proto3" json:"fixed32_value,omitempty"`
	Fixed64Value  uint64  `protobuf:"fixed64,10,opt,name=fixed64_value,json=fixed64Value,proto3" json:"fixed64_value,omitempty"`
	Sfixed32Value int32   `protobuf:"fixed32,11,opt,name=sfixed32_value,json=sfixed32Value,proto3" json:"sfixed32_value,omitempty"`
	Sfixed64Value int64   `protobuf:"fixed64,12,opt,name=sfixed64_value,json=sfixed64Value,proto3" json:"sfixed64_value,omitempty"`
	BoolValue     bool    `protobuf:"varint,13,opt,name=bool_value,json=boolValue,proto3" json:"bool_value,omitempty"`
	StringValue   string  `protobuf:"bytes,14,opt,name=string_value,json=stringValue,proto3" json:"string_value,omitempty"`
	BytesValue    []byte  `protobuf:"bytes,15,opt,name=bytes_value,json=bytesValue,proto3" json:"bytes_value,omitempty"`
	// repeated types
	DoubleList   []float64 `protobuf:"fixed64,16,rep,packed,name=double_list,json=doubleList,proto3" json:"double_list,omitempty"`
	FloatList    []float32 `protobuf:"fixed32,17,rep,packed,name=float_list,json=floatList,proto3" json:"float_list,omitempty"`
	Int32List    []int32   `protobuf:"varint,18,rep,packed,name=int32_list,json=int32List,proto3" json:"int32_list,omitempty"`
	Int64List    []int64   `protobuf:"varint,19,rep,packed,name=int64_list,json=int64List,proto3" json:"int64_list,omitempty"`
	Uint32List   []uint32  `protobuf:"varint,20,rep,packed,name=uint32_list,json=uint32List,proto3" json:"uint32_list,omitempty"`
	Uint64List   []uint64  `protobuf:"varint,21,rep,packed,name=uint64_list,json=uint64List,proto3" json:"uint64_list,omitempty"`
	Sint32List   []int32   `protobuf:"zigzag32,22,rep,packed,name=sint32_list,json=sint32List,proto3" json:"sint32_list,omitempty"`
	Sint64List   []int64   `protobuf:"zigzag64,23,rep,packed,name=sint64_list,json=sint64List,proto3" json:"sint64_list,omitempty"`
	Fixed32List  []uint32  `protobuf:"fixed32,24,rep,packed,name=fixed32_list,json=fixed32List,proto3" json:"fixed32_list,omitempty"`
	Fixed64List  []uint64  `protobuf:"fixed64,25,rep,packed,name=fixed64_list,json=fixed64List,proto3" json:"fixed64_list,omitempty"`
	Sfixed32List []int32   `protobuf:"fixed32,26,rep,packed,name=sfixed32_list,json=sfixed32List,proto3" json:"sfixed32_list,omitempty"`
	Sfixed64List []int64   `protobuf:"fixed64,27,rep,packed,name=sfixed64_list,json=sfixed64List,proto3" json:"sfixed64_list,omitempty"`
	BoolList     []bool    `protobuf:"varint,28,rep,packed,name=bool_list,json=boolList,proto3" json:"bool_list,omitempty"`
	StringList   []string  `protobuf:"bytes,29,rep,name=string_list,json=stringList,proto3" json:"string_list,omitempty"`
	BytesList    [][]byte  `protobuf:"bytes,30,rep,name=bytes_list,json=bytesList,proto3" json:"bytes_list,omitempty"`
	// map key types
	Int32ToStringMap    map[int32]string  `protobuf:"bytes,31,rep,name=int32_to_string_map,json=int32ToStringMap,proto3" json:"int32_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Int64ToStringMap    map[int64]string  `protobuf:"bytes,32,rep,name=int64_to_string_map,json=int64ToStringMap,proto3" json:"int64_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint32ToStringMap   map[uint32]string `protobuf:"bytes,33,rep,name=uint32_to_string_map,json=uint32ToStringMap,proto3" json:"uint32_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Uint64ToStringMap   map[uint64]string `protobuf:"bytes,34,rep,name=uint64_to_string_map,json=uint64ToStringMap,proto3" json:"uint64_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint32ToStringMap   map[int32]string  `protobuf:"bytes,35,rep,name=sint32_to_string_map,json=sint32ToStringMap,proto3" json:"sint32_to_string_map,omitempty" protobuf_key:"zigzag32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sint64ToStringMap   map[int64]string  `protobuf:"bytes,36,rep,name=sint64_to_string_map,json=sint64ToStringMap,proto3" json:"sint64_to_string_map,omitempty" protobuf_key:"zigzag64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed32ToStringMap  map[uint32]string `protobuf:"bytes,37,rep,name=fixed32_to_string_map,json=fixed32ToStringMap,proto3" json:"fixed32_to_string_map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Fixed64ToStringMap  map[uint64]string `protobuf:"bytes,38,rep,name=fixed64_to_string_map,json=fixed64ToStringMap,proto3" json:"fixed64_to_string_map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed32ToStringMap map[int32]string  `protobuf:"bytes,39,rep,name=sfixed32_to_string_map,json=sfixed32ToStringMap,proto3" json:"sfixed32_to_string_map,omitempty" protobuf_key:"fixed32,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Sfixed64ToStringMap map[int64]string  `protobuf:"bytes,40,rep,name=sfixed64_to_string_map,json=sfixed64ToStringMap,proto3" json:"sfixed64_to_string_map,omitempty" protobuf_key:"fixed64,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BoolToStringMap     map[bool]string   `protobuf:"bytes,41,rep,name=bool_to_string_map,json=boolToStringMap,proto3" json:"bool_to_string_map,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	StringToStringMap   map[string]string `protobuf:"bytes,42,rep,name=string_to_string_map,json=stringToStringMap,proto3" json:"string_to_string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// map value types
	DoubleMap   map[string]float64 `protobuf:"bytes,43,rep,name=double_map,json=doubleMap,proto3" json:"double_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	FloatMap    map[string]float32 `protobuf:"bytes,44,rep,name=float_map,json=floatMap,proto3" json:"float_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Int32Map    map[string]int32   `protobuf:"bytes,45,rep,name=int32_map,json=int32Map,proto3" json:"int32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Int64Map    map[string]int64   `protobuf:"bytes,46,rep,name=int64_map,json=int64Map,proto3" json:"int64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint32Map   map[string]uint32  `protobuf:"bytes,47,rep,name=uint32_map,json=uint32Map,proto3" json:"uint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Uint64Map   map[string]uint64  `protobuf:"bytes,48,rep,name=uint64_map,json=uint64Map,proto3" json:"uint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Sint32Map   map[string]int32   `protobuf:"bytes,49,rep,name=sint32_map,json=sint32Map,proto3" json:"sint32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	Sint64Map   map[string]int64   `protobuf:"bytes,50,rep,name=sint64_map,json=sint64Map,proto3" json:"sint64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	Fixed32Map  map[string]uint32  `protobuf:"bytes,51,rep,name=fixed32_map,json=fixed32Map,proto3" json:"fixed32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Fixed64Map  map[string]uint64  `protobuf:"bytes,52,rep,name=fixed64_map,json=fixed64Map,proto3" json:"fixed64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	Sfixed32Map map[string]int32   `protobuf:"bytes,53,rep,name=sfixed32_map,json=sfixed32Map,proto3" json:"sfixed32_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Sfixed64Map map[string]int64   `protobuf:"bytes,54,rep,name=sfixed64_map,json=sfixed64Map,proto3" json:"sfixed64_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BoolMap     map[string]bool    `protobuf:"bytes,55,rep,name=bool_map,json=boolMap,proto3" json:"bool_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	StringMap   map[string]string  `protobuf:"bytes,56,rep,name=string_map,json=stringMap,proto3" json:"string_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	BytesMap    map[string][]byte  `protobuf:"bytes,57,rep,name=bytes_map,json=bytesMap,proto3" json:"bytes_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// explicit presence types
	OptDoubleValue   *float64                 `protobuf:"fixed64,58,opt,name=opt_double_value,json=optDoubleValue,proto3,oneof" json:"opt_double_value,omitempty"`
	OptFloatValue    *float32                 `protobuf:"fixed32,59,opt,name=opt_float_value,json=optFloatValue,proto3,oneof" json:"opt_float_value,omitempty"`
	OptInt32Value    *int32                   `protobuf:"varint,60,opt,name=opt_int32_value,json=optInt32Value,proto3,oneof" json:"opt_int32_value,omitempty"`
	OptInt64Value    *int64                   `protobuf:"varint,61,opt,name=opt_int64_value,json=optInt64Value,proto3,oneof" json:"opt_int64_value,omitempty"`
	OptUint32Value   *uint32                  `protobuf:"varint,62,opt,name=opt_uint32_value,json=optUint32Value,proto3,oneof" json:"opt_uint32_value,omitempty"`
	OptUint64Value   *uint64                  `protobuf:"varint,63,opt,name=opt_uint64_value,json=optUint64Value,proto3,oneof" json:"opt_uint64_value,omitempty"`
	OptSint32Value   *int32                   `protobuf:"zigzag32,64,opt,name=opt_sint32_value,json=optSint32Value,proto3,oneof" json:"opt_sint32_value,omitempty"`
	OptSint64Value   *int64                   `protobuf:"zigzag64,65,opt,name=opt_sint64_value,json=optSint64Value,proto3,oneof" json:"opt_sint64_value,omitempty"`
	OptFixed32Value  *uint32                  `protobuf:"fixed32,66,opt,name=opt_fixed32_value,json=optFixed32Value,proto3,oneof" json:"opt_fixed32_value,omitempty"`
	OptFixed64Value  *uint64                  `protobuf:"fixed64,67,opt,name=opt_fixed64_value,json=optFixed64Value,proto3,oneof" json:"opt_fixed64_value,omitempty"`
	OptSfixed32Value *int32                   `protobuf:"fixed32,68,opt,name=opt_sfixed32_value,json=optSfixed32Value,proto3,oneof" json:"opt_sfixed32_value,omitempty"`
	OptSfixed64Value *int64                   `protobuf:"fixed64,69,opt,name=opt_sfixed64_value,json=optSfixed64Value,proto3,oneof" json:"opt_sfixed64_value,omitempty"`
	OptBoolValue     *bool                    `protobuf:"varint,70,opt,name=opt_bool_value,json=optBoolValue,proto3,oneof" json:"opt_bool_value,omitempty"`
	OptStringValue   *string                  `protobuf:"bytes,71,opt,name=opt_string_value,json=optStringValue,proto3,oneof" json:"opt_string_value,omitempty"`
	OptBytesValue    []byte                   `protobuf:"bytes,72,opt,name=opt_bytes_value,json=optBytesValue,proto3,oneof" json:"opt_bytes_value,omitempty"`
	MsgValue         *AllTypes                `protobuf:"bytes,73,opt,name=msg_value,json=msgValue,proto3" json:"msg_value,omitempty"`
	EnumValue        AllTypes_Enum            `protobuf:"varint,74,opt,name=enum_value,json=enumValue,proto3,enum=vanguard.test.v1.AllTypes_Enum" json:"enum_value,omitempty"`
	OptMsgValue      *AllTypes                `protobuf:"bytes,75,opt,name=opt_msg_value,json=optMsgValue,proto3,oneof" json:"opt_msg_value,omitempty"`
	OptEnumValue     *AllTypes_Enum           `protobuf:"varint,76,opt,name=opt_enum_value,json=optEnumValue,proto3,enum=vanguard.test.v1.AllTypes_Enum,oneof" json:"opt_enum_value,omitempty"`
	MsgList          []*AllTypes              `protobuf:"bytes,77,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty"`
	EnumList         []AllTypes_Enum          `protobuf:"varint,78,rep,packed,name=enum_list,json=enumList,proto3,enum=vanguard.test.v1.AllTypes_Enum" json:"enum_list,omitempty"`
	MsgMap           map[string]*AllTypes     `protobuf:"bytes,79,rep,name=msg_map,json=msgMap,proto3" json:"msg_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	EnumMap          map[string]AllTypes_Enum `protobuf:"bytes,80,rep,name=enum_map,json=enumMap,proto3" json:"enum_map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=vanguard.test.v1.AllTypes_Enum"`
	// oneof
	//
	// Types that are valid to be assigned to Option:
	//
	//	*AllTypes_DoubleOption
	//	*AllTypes_FloatOption
	//	*AllTypes_Int32Option
	//	*AllTypes_Int64Option
	//	*AllTypes_Uint32Option
	//	*AllTypes_Uint64Option
	//	*AllTypes_Sint32Option
	//	*AllTypes_Sint64Option
	//	*AllTypes_Fixed32Option
	//	*AllTypes_Fixed64Option
	//	*AllTypes_Sfixed32Option
	//	*AllTypes_Sfixed64Option
	//	*AllTypes_BoolOption
	//	*AllTypes_StringOption
	//	*AllTypes_BytesOption
	//	*AllTypes_MsgOption
	//	*AllTypes_EnumOption
	Option        isAllTypes_Option `protobuf_oneof:"option"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AllTypes) Reset() {
	*x = AllTypes{}
	mi := &file_vanguard_test_v1_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AllTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllTypes) ProtoMessage() {}

func (x *AllTypes) ProtoReflect() protoreflect.Message {
	mi := &file_vanguard_test_v1_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllTypes.ProtoReflect.Descriptor instead.
func (*AllTypes) Descriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{1}
}

func (x *AllTypes) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *AllTypes) GetFloatValue() float32 {
	if x != nil {
		return x.FloatValue
	}
	return 0
}

func (x *AllTypes) GetInt32Value() int32 {
	if x != nil {
		return x.Int32Value
	}
	return 0
}

func (x *AllTypes) GetInt64Value() int64 {
	if x != nil {
		return x.Int64Value
	}
	return 0
}

func (x *AllTypes) GetUint32Value() uint32 {
	if x != nil {
		return x.Uint32Value
	}
	return 0
}

func (x *AllTypes) GetUint64Value() uint64 {
	if x != nil {
		return x.Uint64Value
	}
	return 0
}

func (x *AllTypes) GetSint32Value() int32 {
	if x != nil {
		return x.Sint32Value
	}
	return 0
}

func (x *AllTypes) GetSint64Value() int64 {
	if x != nil {
		return x.Sint64Value
	}
	return 0
}

func (x *AllTypes) GetFixed32Value() uint32 {
	if x != nil {
		return x.Fixed32Value
	}
	return 0
}

func (x *AllTypes) GetFixed64Value() uint64 {
	if x != nil {
		return x.Fixed64Value
	}
	return 0
}

func (x *AllTypes) GetSfixed32Value() int32 {
	if x != nil {
		return x.Sfixed32Value
	}
	return 0
}

func (x *AllTypes) GetSfixed64Value() int64 {
	if x != nil {
		return x.Sfixed64Value
	}
	return 0
}

func (x *AllTypes) GetBoolValue() bool {
	if x != nil {
		return x.BoolValue
	}
	return false
}

func (x *AllTypes) GetStringValue() string {
	if x != nil {
		return x.StringValue
	}
	return ""
}

func (x *AllTypes) GetBytesValue() []byte {
	if x != nil {
		return x.BytesValue
	}
	return nil
}

func (x *AllTypes) GetDoubleList() []float64 {
	if x != nil {
		return x.DoubleList
	}
	return nil
}

func (x *AllTypes) GetFloatList() []float32 {
	if x != nil {
		return x.FloatList
	}
	return nil
}

func (x *AllTypes) GetInt32List() []int32 {
	if x != nil {
		return x.Int32List
	}
	return nil
}

func (x *AllTypes) GetInt64List() []int64 {
	if x != nil {
		return x.Int64List
	}
	return nil
}

func (x *AllTypes) GetUint32List() []uint32 {
	if x != nil {
		return x.Uint32List
	}
	return nil
}

func (x *AllTypes) GetUint64List() []uint64 {
	if x != nil {
		return x.Uint64List
	}
	return nil
}

func (x *AllTypes) GetSint32List() []int32 {
	if x != nil {
		return x.Sint32List
	}
	return nil
}

func (x *AllTypes) GetSint64List() []int64 {
	if x != nil {
		return x.Sint64List
	}
	return nil
}

func (x *AllTypes) GetFixed32List() []uint32 {
	if x != nil {
		return x.Fixed32List
	}
	return nil
}

func (x *AllTypes) GetFixed64List() []uint64 {
	if x != nil {
		return x.Fixed64List
	}
	return nil
}

func (x *AllTypes) GetSfixed32List() []int32 {
	if x != nil {
		return x.Sfixed32List
	}
	return nil
}

func (x *AllTypes) GetSfixed64List() []int64 {
	if x != nil {
		return x.Sfixed64List
	}
	return nil
}

func (x *AllTypes) GetBoolList() []bool {
	if x != nil {
		return x.BoolList
	}
	return nil
}

func (x *AllTypes) GetStringList() []string {
	if x != nil {
		return x.StringList
	}
	return nil
}

func (x *AllTypes) GetBytesList() [][]byte {
	if x != nil {
		return x.BytesList
	}
	return nil
}

func (x *AllTypes) GetInt32ToStringMap() map[int32]string {
	if x != nil {
		return x.Int32ToStringMap
	}
	return nil
}

func (x *AllTypes) GetInt64ToStringMap() map[int64]string {
	if x != nil {
		return x.Int64ToStringMap
	}
	return nil
}

func (x *AllTypes) GetUint32ToStringMap() map[uint32]string {
	if x != nil {
		return x.Uint32ToStringMap
	}
	return nil
}

func (x *AllTypes) GetUint64ToStringMap() map[uint64]string {
	if x != nil {
		return x.Uint64ToStringMap
	}
	return nil
}

func (x *AllTypes) GetSint32ToStringMap() map[int32]string {
	if x != nil {
		return x.Sint32ToStringMap
	}
	return nil
}

func (x *AllTypes) GetSint64ToStringMap() map[int64]string {
	if x != nil {
		return x.Sint64ToStringMap
	}
	return nil
}

func (x *AllTypes) GetFixed32ToStringMap() map[uint32]string {
	if x != nil {
		return x.Fixed32ToStringMap
	}
	return nil
}

func (x *AllTypes) GetFixed64ToStringMap() map[uint64]string {
	if x != nil {
		return x.Fixed64ToStringMap
	}
	return nil
}

func (x *AllTypes) GetSfixed32ToStringMap() map[int32]string {
	if x != nil {
		return x.Sfixed32ToStringMap
	}
	return nil
}

func (x *AllTypes) GetSfixed64ToStringMap() map[int64]string {
	if x != nil {
		return x.Sfixed64ToStringMap
	}
	return nil
}

func (x *AllTypes) GetBoolToStringMap() map[bool]string {
	if x != nil {
		return x.BoolToStringMap
	}
	return nil
}

func (x *AllTypes) GetStringToStringMap() map[string]string {
	if x != nil {
		return x.StringToStringMap
	}
	return nil
}

func (x *AllTypes) GetDoubleMap() map[string]float64 {
	if x != nil {
		return x.DoubleMap
	}
	return nil
}

func (x *AllTypes) GetFloatMap() map[string]float32 {
	if x != nil {
		return x.FloatMap
	}
	return nil
}

func (x *AllTypes) GetInt32Map() map[string]int32 {
	if x != nil {
		return x.Int32Map
	}
	return nil
}

func (x *AllTypes) GetInt64Map() map[string]int64 {
	if x != nil {
		return x.Int64Map
	}
	return nil
}

func (x *AllTypes) GetUint32Map() map[string]uint32 {
	if x != nil {
		return x.Uint32Map
	}
	return nil
}

func (x *AllTypes) GetUint64Map() map[string]uint64 {
	if x != nil {
		return x.Uint64Map
	}
	return nil
}

func (x *AllTypes) GetSint32Map() map[string]int32 {
	if x != nil {
		return x.Sint32Map
	}
	return nil
}

func (x *AllTypes) GetSint64Map() map[string]int64 {
	if x != nil {
		return x.Sint64Map
	}
	return nil
}

func (x *AllTypes) GetFixed32Map() map[string]uint32 {
	if x != nil {
		return x.Fixed32Map
	}
	return nil
}

func (x *AllTypes) GetFixed64Map() map[string]uint64 {
	if x != nil {
		return x.Fixed64Map
	}
	return nil
}

func (x *AllTypes) GetSfixed32Map() map[string]int32 {
	if x != nil {
		return x.Sfixed32Map
	}
	return nil
}

func (x *AllTypes) GetSfixed64Map() map[string]int64 {
	if x != nil {
		return x.Sfixed64Map
	}
	return nil
}

func (x *AllTypes) GetBoolMap() map[string]bool {
	if x != nil {
		return x.BoolMap
	}
	return nil
}

func (x *AllTypes) GetStringMap() map[string]string {
	if x != nil {
		return x.StringMap
	}
	return nil
}

func (x *AllTypes) GetBytesMap() map[string][]byte {
	if x != nil {
		return x.BytesMap
	}
	return nil
}

func (x *AllTypes) GetOptDoubleValue() float64 {
	if x != nil && x.OptDoubleValue != nil {
		return *x.OptDoubleValue
	}
	return 0
}

func (x *AllTypes) GetOptFloatValue() float32 {
	if x != nil && x.OptFloatValue != nil {
		return *x.OptFloatValue
	}
	return 0
}

func (x *AllTypes) GetOptInt32Value() int32 {
	if x != nil && x.OptInt32Value != nil {
		return *x.OptInt32Value
	}
	return 0
}

func (x *AllTypes) GetOptInt64Value() int64 {
	if x != nil && x.OptInt64Value != nil {
		return *x.OptInt64Value
	}
	return 0
}

func (x *AllTypes) GetOptUint32Value() uint32 {
	if x != nil && x.OptUint32Value != nil {
		return *x.OptUint32Value
	}
	return 0
}

func (x *AllTypes) GetOptUint64Value() uint64 {
	if x != nil && x.OptUint64Value != nil {
		return *x.OptUint64Value
	}
	return 0
}

func (x *AllTypes) GetOptSint32Value() int32 {
	if x != nil && x.OptSint32Value != nil {
		return *x.OptSint32Value
	}
	return 0
}

func (x *AllTypes) GetOptSint64Value() int64 {
	if x != nil && x.OptSint64Value != nil {
		return *x.OptSint64Value
	}
	return 0
}

func (x *AllTypes) GetOptFixed32Value() uint32 {
	if x != nil && x.OptFixed32Value != nil {
		return *x.OptFixed32Value
	}
	return 0
}

func (x *AllTypes) GetOptFixed64Value() uint64 {
	if x != nil && x.OptFixed64Value != nil {
		return *x.OptFixed64Value
	}
	return 0
}

func (x *AllTypes) GetOptSfixed32Value() int32 {
	if x != nil && x.OptSfixed32Value != nil {
		return *x.OptSfixed32Value
	}
	return 0
}

func (x *AllTypes) GetOptSfixed64Value() int64 {
	if x != nil && x.OptSfixed64Value != nil {
		return *x.OptSfixed64Value
	}
	return 0
}

func (x *AllTypes) GetOptBoolValue() bool {
	if x != nil && x.OptBoolValue != nil {
		return *x.OptBoolValue
	}
	return false
}

func (x *AllTypes) GetOptStringValue() string {
	if x != nil && x.OptStringValue != nil {
		return *x.OptStringValue
	}
	return ""
}

func (x *AllTypes) GetOptBytesValue() []byte {
	if x != nil {
		return x.OptBytesValue
	}
	return nil
}

func (x *AllTypes) GetMsgValue() *AllTypes {
	if x != nil {
		return x.MsgValue
	}
	return nil
}

func (x *AllTypes) GetEnumValue() AllTypes_Enum {
	if x != nil {
		return x.EnumValue
	}
	return AllTypes_ENUM_UNSPECIFIED
}

func (x *AllTypes) GetOptMsgValue() *AllTypes {
	if x != nil {
		return x.OptMsgValue
	}
	return nil
}

func (x *AllTypes) GetOptEnumValue() AllTypes_Enum {
	if x != nil && x.OptEnumValue != nil {
		return *x.OptEnumValue
	}
	return AllTypes_ENUM_UNSPECIFIED
}

func (x *AllTypes) GetMsgList() []*AllTypes {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *AllTypes) GetEnumList() []AllTypes_Enum {
	if x != nil {
		return x.EnumList
	}
	return nil
}

func (x *AllTypes) GetMsgMap() map[string]*AllTypes {
	if x != nil {
		return x.MsgMap
	}
	return nil
}

func (x *AllTypes) GetEnumMap() map[string]AllTypes_Enum {
	if x != nil {
		return x.EnumMap
	}
	return nil
}

func (x *AllTypes) GetOption() isAllTypes_Option {
	if x != nil {
		return x.Option
	}
	return nil
}

func (x *AllTypes) GetDoubleOption() float64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_DoubleOption); ok {
			return x.DoubleOption
		}
	}
	return 0
}

func (x *AllTypes) GetFloatOption() float32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_FloatOption); ok {
			return x.FloatOption
		}
	}
	return 0
}

func (x *AllTypes) GetInt32Option() int32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Int32Option); ok {
			return x.Int32Option
		}
	}
	return 0
}

func (x *AllTypes) GetInt64Option() int64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Int64Option); ok {
			return x.Int64Option
		}
	}
	return 0
}

func (x *AllTypes) GetUint32Option() uint32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Uint32Option); ok {
			return x.Uint32Option
		}
	}
	return 0
}

func (x *AllTypes) GetUint64Option() uint64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Uint64Option); ok {
			return x.Uint64Option
		}
	}
	return 0
}

func (x *AllTypes) GetSint32Option() int32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Sint32Option); ok {
			return x.Sint32Option
		}
	}
	return 0
}

func (x *AllTypes) GetSint64Option() int64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Sint64Option); ok {
			return x.Sint64Option
		}
	}
	return 0
}

func (x *AllTypes) GetFixed32Option() uint32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Fixed32Option); ok {
			return x.Fixed32Option
		}
	}
	return 0
}

func (x *AllTypes) GetFixed64Option() uint64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Fixed64Option); ok {
			return x.Fixed64Option
		}
	}
	return 0
}

func (x *AllTypes) GetSfixed32Option() int32 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Sfixed32Option); ok {
			return x.Sfixed32Option
		}
	}
	return 0
}

func (x *AllTypes) GetSfixed64Option() int64 {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_Sfixed64Option); ok {
			return x.Sfixed64Option
		}
	}
	return 0
}

func (x *AllTypes) GetBoolOption() bool {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_BoolOption); ok {
			return x.BoolOption
		}
	}
	return false
}

func (x *AllTypes) GetStringOption() string {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_StringOption); ok {
			return x.StringOption
		}
	}
	return ""
}

func (x *AllTypes) GetBytesOption() []byte {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_BytesOption); ok {
			return x.BytesOption
		}
	}
	return nil
}

func (x *AllTypes) GetMsgOption() *AllTypes {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_MsgOption); ok {
			return x.MsgOption
		}
	}
	return nil
}

func (x *AllTypes) GetEnumOption() AllTypes_Enum {
	if x != nil {
		if x, ok := x.Option.(*AllTypes_EnumOption); ok {
			return x.EnumOption
		}
	}
	return AllTypes_ENUM_UNSPECIFIED
}

type isAllTypes_Option interface {
	isAllTypes_Option()
}

type AllTypes_DoubleOption struct {
	DoubleOption float64 `protobuf:"fixed64,81,opt,name=double_option,json=doubleOption,proto3,oneof"`
}

type AllTypes_FloatOption struct {
	FloatOption float32 `protobuf:"fixed32,82,opt,name=float_option,json=floatOption,proto3,oneof"`
}

type AllTypes_Int32Option struct {
	Int32Option int32 `protobuf:"varint,83,opt,name=int32_option,json=int32Option,proto3,oneof"`
}

type AllTypes_Int64Option struct {
	Int64Option int64 `protobuf:"varint,84,opt,name=int64_option,json=int64Option,proto3,oneof"`
}

type AllTypes_Uint32Option struct {
	Uint32Option uint32 `protobuf:"varint,85,opt,name=uint32_option,json=uint32Option,proto3,oneof"`
}

type AllTypes_Uint64Option struct {
	Uint64Option uint64 `protobuf:"varint,86,opt,name=uint64_option,json=uint64Option,proto3,oneof"`
}

type AllTypes_Sint32Option struct {
	Sint32Option int32 `protobuf:"zigzag32,87,opt,name=sint32_option,json=sint32Option,proto3,oneof"`
}

type AllTypes_Sint64Option struct {
	Sint64Option int64 `protobuf:"zigzag64,88,opt,name=sint64_option,json=sint64Option,proto3,oneof"`
}

type AllTypes_Fixed32Option struct {
	Fixed32Option uint32 `protobuf:"fixed32,89,opt,name=fixed32_option,json=fixed32Option,proto3,oneof"`
}

type AllTypes_Fixed64Option struct {
	Fixed64Option uint64 `protobuf:"fixed64,90,opt,name=fixed64_option,json=fixed64Option,proto3,oneof"`
}

type AllTypes_Sfixed32Option struct {
	Sfixed32Option int32 `protobuf:"fixed32,91,opt,name=sfixed32_option,json=sfixed32Option,proto3,oneof"`
}

type AllTypes_Sfixed64Option struct {
	Sfixed64Option int64 `protobuf:"fixed64,92,opt,name=sfixed64_option,json=sfixed64Option,proto3,oneof"`
}

type AllTypes_BoolOption struct {
	BoolOption bool `protobuf:"varint,93,opt,name=bool_option,json=boolOption,proto3,oneof"`
}

type AllTypes_StringOption struct {
	StringOption string `protobuf:"bytes,94,opt,name=string_option,json=stringOption,proto3,oneof"`
}

type AllTypes_BytesOption struct {
	BytesOption []byte `protobuf:"bytes,95,opt,name=bytes_option,json=bytesOption,proto3,oneof"`
}

type AllTypes_MsgOption struct {
	MsgOption *AllTypes `protobuf:"bytes,96,opt,name=msg_option,json=msgOption,proto3,oneof"`
}

type AllTypes_EnumOption struct {
	EnumOption AllTypes_Enum `protobuf:"varint,97,opt,name=enum_option,json=enumOption,proto3,enum=vanguard.test.v1.AllTypes_Enum,oneof"`
}

func (*AllTypes_DoubleOption) isAllTypes_Option() {}

func (*AllTypes_FloatOption) isAllTypes_Option() {}

func (*AllTypes_Int32Option) isAllTypes_Option() {}

func (*AllTypes_Int64Option) isAllTypes_Option() {}

func (*AllTypes_Uint32Option) isAllTypes_Option() {}

func (*AllTypes_Uint64Option) isAllTypes_Option() {}

func (*AllTypes_Sint32Option) isAllTypes_Option() {}

func (*AllTypes_Sint64Option) isAllTypes_Option() {}

func (*AllTypes_Fixed32Option) isAllTypes_Option() {}

func (*AllTypes_Fixed64Option) isAllTypes_Option() {}

func (*AllTypes_Sfixed32Option) isAllTypes_Option() {}

func (*AllTypes_Sfixed64Option) isAllTypes_Option() {}

func (*AllTypes_BoolOption) isAllTypes_Option() {}

func (*AllTypes_StringOption) isAllTypes_Option() {}

func (*AllTypes_BytesOption) isAllTypes_Option() {}

func (*AllTypes_MsgOption) isAllTypes_Option() {}

func (*AllTypes_EnumOption) isAllTypes_Option() {}

type ParameterValues_Nested struct {
	state              protoimpl.MessageState      `protogen:"open.v1"`
	DoubleValue        float64                     `protobuf:"fixed64,1,opt,name=double_value,json=doubleValue,proto3" json:"double_value,omitempty"`
	DoubleValueWrapper *wrapperspb.DoubleValue     `protobuf:"bytes,2,opt,name=double_value_wrapper,json=doubleValueWrapper,proto3" json:"double_value_wrapper,omitempty"`
	EnumValue          ParameterValues_Nested_Enum `protobuf:"varint,3,opt,name=enum_value,json=enumValue,proto3,enum=vanguard.test.v1.ParameterValues_Nested_Enum" json:"enum_value,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ParameterValues_Nested) Reset() {
	*x = ParameterValues_Nested{}
	mi := &file_vanguard_test_v1_test_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParameterValues_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParameterValues_Nested) ProtoMessage() {}

func (x *ParameterValues_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_vanguard_test_v1_test_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParameterValues_Nested.ProtoReflect.Descriptor instead.
func (*ParameterValues_Nested) Descriptor() ([]byte, []int) {
	return file_vanguard_test_v1_test_proto_rawDescGZIP(), []int{0, 0}
}

func (x *ParameterValues_Nested) GetDoubleValue() float64 {
	if x != nil {
		return x.DoubleValue
	}
	return 0
}

func (x *ParameterValues_Nested) GetDoubleValueWrapper() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DoubleValueWrapper
	}
	return nil
}

func (x *ParameterValues_Nested) GetEnumValue() ParameterValues_Nested_Enum {
	if x != nil {
		return x.EnumValue
	}
	return ParameterValues_Nested_ENUM_UNSPECIFIED
}

var File_vanguard_test_v1_test_proto protoreflect.FileDescriptor

const file_vanguard_test_v1_test_proto_rawDesc = "" +
	"\n" +
	"\x1bvanguard/test/v1/test.proto\x12\x10vanguard.test.v1\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1cgoogle/protobuf/struct.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a\x1egoogle/protobuf/wrappers.proto\"\x81\x19\n" +
	"\x0fParameterValues\x12!\n" +
	"\fdouble_value\x18\x01 \x01(\x01R\vdoubleValue\x12\x1f\n" +
	"\vfloat_value\x18\x02 \x01(\x02R\n" +
	"floatValue\x12\x1f\n" +
	"\vint32_value\x18\x03 \x01(\x05R\n" +
	"int32Value\x12\x1f\n" +
	"\vint64_value\x18\x04 \x01(\x03R\n" +
	"int64Value\x12!\n" +
	"\fuint32_value\x18\x05 \x01(\rR\vuint32Value\x12!\n" +
	"\fuint64_value\x18\x06 \x01(\x04R\vuint64Value\x12!\n" +
	"\fsint32_value\x18\a \x01(\x11R\vsint32Value\x12!\n" +
	"\fsint64_value\x18\b \x01(\x12R\vsint64Value\x12#\n" +
	"\rfixed32_value\x18\t \x01(\aR\ffixed32Value\x12#\n" +
	"\rfixed64_value\x18\n" +
	" \x01(\x06R\ffixed64Value\x12%\n" +
	"\x0esfixed32_value\x18\v \x01(\x0fR\rsfixed32Value\x12%\n" +
	"\x0esfixed64_value\x18\f \x01(\x10R\rsfixed64Value\x12\x1d\n" +
	"\n" +
	"bool_value\x18\r \x01(\bR\tboolValue\x12!\n" +
	"\fstring_value\x18\x0e \x01(\tR\vstringValue\x12\x1f\n" +
	"\vbytes_value\x18\x0f \x01(\fR\n" +
	"bytesValue\x128\n" +
	"\ttimestamp\x18\x10 \x01(\v2\x1a.google.protobuf.TimestampR\ttimestamp\x125\n" +
	"\bduration\x18\x11 \x01(\v2\x19.google.protobuf.DurationR\bduration\x12H\n" +
	"\x12bool_value_wrapper\x18\x12 \x01(\v2\x1a.google.protobuf.BoolValueR\x10boolValueWrapper\x12K\n" +
	"\x13int32_value_wrapper\x18\x13 \x01(\v2\x1b.google.protobuf.Int32ValueR\x11int32ValueWrapper\x12K\n" +
	"\x13int64_value_wrapper\x18\x14 \x01(\v2\x1b.google.protobuf.Int64ValueR\x11int64ValueWrapper\x12N\n" +
	"\x14uint32_value_wrapper\x18\x15 \x01(\v2\x1c.google.protobuf.UInt32ValueR\x12uint32ValueWrapper\x12N\n" +
	"\x14uint64_value_wrapper\x18\x16 \x01(\v2\x1c.google.protobuf.UInt64ValueR\x12uint64ValueWrapper\x12K\n" +
	"\x13float_value_wrapper\x18\x17 \x01(\v2\x1b.google.protobuf.FloatValueR\x11floatValueWrapper\x12N\n" +
	"\x14double_value_wrapper\x18\x18 \x01(\v2\x1c.google.protobuf.DoubleValueR\x12doubleValueWrapper\x12K\n" +
	"\x13bytes_value_wrapper\x18\x19 \x01(\v2\x1b.google.protobuf.BytesValueR\x11bytesValueWrapper\x12N\n" +
	"\x14string_value_wrapper\x18\x1a \x01(\v2\x1c.google.protobuf.StringValueR\x12stringValueWrapper\x129\n" +
	"\n" +
	"field_mask\x18\x1b \x01(\v2\x1a.google.protobuf.FieldMaskR\tfieldMask\x12E\n" +
	"\n" +
	"enum_value\x18\x1c \x01(\x0e2&.vanguard.test.v1.ParameterValues.EnumR\tenumValue\x12C\n" +
	"\tenum_list\x18\x1d \x03(\x0e2&.vanguard.test.v1.ParameterValues.EnumR\benumList\x12\x1f\n" +
	"\vdouble_list\x18\x1e \x03(\x01R\n" +
	"doubleList\x12H\n" +
	"\x11double_value_list\x18\x1f \x03(\v2\x1c.google.protobuf.DoubleValueR\x0fdoubleValueList\x12.\n" +
	"\x12oneof_double_value\x18! \x01(\x01H\x00R\x10oneofDoubleValue\x12[\n" +
	"\x1aoneof_double_value_wrapper\x18\" \x01(\v2\x1c.google.protobuf.DoubleValueH\x00R\x17oneofDoubleValueWrapper\x12R\n" +
	"\x10oneof_enum_value\x18# \x01(\x0e2&.vanguard.test.v1.ParameterValues.EnumH\x00R\x0eoneofEnumValue\x12@\n" +
	"\x06nested\x18$ \x01(\v2(.vanguard.test.v1.ParameterValues.NestedR\x06nested\x12?\n" +
	"\trecursive\x18% \x01(\v2!.vanguard.test.v1.ParameterValuesR\trecursive\x12O\n" +
	"\n" +
	"string_map\x18& \x03(\v20.vanguard.test.v1.ParameterValues.StringMapEntryR\tstringMap\x12_\n" +
	"\x10string_value_map\x18' \x03(\v25.vanguard.test.v1.ParameterValues.StringValueMapEntryR\x0estringValueMap\x12I\n" +
	"\benum_map\x18( \x03(\v2..vanguard.test.v1.ParameterValues.EnumMapEntryR\aenumMap\x12O\n" +
	"\n" +
	"nested_map\x18) \x03(\v20.vanguard.test.v1.ParameterValues.NestedMapEntryR\tnestedMap\x12:\n" +
	"\fstruct_value\x18* \x01(\v2\x17.google.protobuf.StructR\vstructValue\x12,\n" +
	"\x05value\x18+ \x01(\v2\x16.google.protobuf.ValueR\x05value\x12H\n" +
	"\x0erecursive_list\x18, \x03(\v2!.vanguard.test.v1.ParameterValuesR\rrecursiveList\x1a\xf7\x01\n" +
	"\x06Nested\x12!\n" +
	"\fdouble_value\x18\x01 \x01(\x01R\vdoubleValue\x12N\n" +
	"\x14double_value_wrapper\x18\x02 \x01(\v2\x1c.google.protobuf.DoubleValueR\x12doubleValueWrapper\x12L\n" +
	"\n" +
	"enum_value\x18\x03 \x01(\x0e2-.vanguard.test.v1.ParameterValues.Nested.EnumR\tenumValue\",\n" +
	"\x04Enum\x12\x14\n" +
	"\x10ENUM_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"ENUM_VALUE\x10\x01\x1a<\n" +
	"\x0eStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a_\n" +
	"\x13StringValueMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x122\n" +
	"\x05value\x18\x02 \x01(\v2\x1c.google.protobuf.StringValueR\x05value:\x028\x01\x1ab\n" +
	"\fEnumMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12<\n" +
	"\x05value\x18\x02 \x01(\x0e2&.vanguard.test.v1.ParameterValues.EnumR\x05value:\x028\x01\x1af\n" +
	"\x0eNestedMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12>\n" +
	"\x05value\x18\x02 \x01(\v2(.vanguard.test.v1.ParameterValues.NestedR\x05value:\x028\x01\",\n" +
	"\x04Enum\x12\x14\n" +
	"\x10ENUM_UNSPECIFIED\x10\x00\x12\x0e\n" +
	"\n" +
	"ENUM_VALUE\x10\x01B\a\n" +
	"\x05oneof\"\xe5;\n" +
	"\bAllTypes\x12!\n" +
	"\fdouble_value\x18\x01 \x01(\x01R\vdoubleValue\x12\x1f\n" +
	"\vfloat_value\x18\x02 \x01(\x02R\n" +
	"floatValue\x12\x1f\n" +
	"\vint32_value\x18\x03 \x01(\x05R\n" +
	"int32Value\x12\x1f\n" +
	"\vint64_value\x18\x04 \x01(\x03R\n" +
	"int64Value\x12!\n" +
	"\fuint32_value\x18\x05 \x01(\rR\vuint32Value\x12!\n" +
	"\fuint64_value\x18\x06 \x01(\x04R\vuint64Value\x12!\n" +
	"\fsint32_value\x18\a \x01(\x11R\vsint32Value\x12!\n" +
	"\fsint64_value\x18\b \x01(\x12R\vsint64Value\x12#\n" +
	"\rfixed32_value\x18\t \x01(\aR\ffixed32Value\x12#\n" +
	"\rfixed64_value\x18\n" +
	" \x01(\x06R\ffixed64Value\x12%\n" +
	"\x0esfixed32_value\x18\v \x01(\x0fR\rsfixed32Value\x12%\n" +
	"\x0esfixed64_value\x18\f \x01(\x10R\rsfixed64Value\x12\x1d\n" +
	"\n" +
	"bool_value\x18\r \x01(\bR\tboolValue\x12!\n" +
	"\fstring_value\x18\x0e \x01(\tR\vstringValue\x12\x1f\n" +
	"\vbytes_value\x18\x0f \x01(\fR\n" +
	"bytesValue\x12\x1f\n" +
	"\vdouble_list\x18\x10 \x03(\x01R\n" +
	"doubleList\x12\x1d\n" +
	"\n" +
	"float_list\x18\x11 \x03(\x02R\tfloatList\x12\x1d\n" +
	"\n" +
	"int32_list\x18\x12 \x03(\x05R\tint32List\x12\x1d\n" +
	"\n" +
	"int64_list\x18\x13 \x03(\x03R\tint64List\x12\x1f\n" +
	"\vuint32_list\x18\x14 \x03(\rR\n" +
	"uint32List\x12\x1f\n" +
	"\vuint64_list\x18\x15 \x03(\x04R\n" +
	"uint64List\x12\x1f\n" +
	"\vsint32_list\x18\x16 \x03(\x11R\n" +
	"sint32List\x12\x1f\n" +
	"\vsint64_list\x18\x17 \x03(\x12R\n" +
	"sint64List\x12!\n" +
	"\ffixed32_list\x18\x18 \x03(\aR\vfixed32List\x12!\n" +
	"\ffixed64_list\x18\x19 \x03(\x06R\vfixed64List\x12#\n" +
	"\rsfixed32_list\x18\x1a \x03(\x0fR\fsfixed32List\x12#\n" +
	"\rsfixed64_list\x18\x1b \x03(\x10R\fsfixed64List\x12\x1b\n" +
	"\tbool_list\x18\x1c \x03(\bR\bboolList\x12\x1f\n" +
	"\vstring_list\x18\x1d \x03(\tR\n" +
	"stringList\x12\x1d\n" +
	"\n" +
	"bytes_list\x18\x1e \x03(\fR\tbytesList\x12_\n" +
	"\x13int32_to_string_map\x18\x1f \x03(\v20.vanguard.test.v1.AllTypes.Int32ToStringMapEntryR\x10int32ToStringMap\x12_\n" +
	"\x13int64_to_string_map\x18  \x03(\v20.vanguard.test.v1.AllTypes.Int64ToStringMapEntryR\x10int64ToStringMap\x12b\n" +
	"\x14uint32_to_string_map\x18! \x03(\v21.vanguard.test.v1.AllTypes.Uint32ToStringMapEntryR\x11uint32ToStringMap\x12b\n" +
	"\x14uint64_to_string_map\x18\" \x03(\v21.vanguard.test.v1.AllTypes.Uint64ToStringMapEntryR\x11uint64ToStringMap\x12b\n" +
	"\x14sint32_to_string_map\x18# \x03(\v21.vanguard.test.v1.AllTypes.Sint32ToStringMapEntryR\x11sint32ToStringMap\x12b\n" +
	"\x14sint64_to_string_map\x18$ \x03(\v21.vanguard.test.v1.AllTypes.Sint64ToStringMapEntryR\x11sint64ToStringMap\x12e\n" +
	"\x15fixed32_to_string_map\x18% \x03(\v22.vanguard.test.v1.AllTypes.Fixed32ToStringMapEntryR\x12fixed32ToStringMap\x12e\n" +
	"\x15fixed64_to_string_map\x18& \x03(\v22.vanguard.test.v1.AllTypes.Fixed64ToStringMapEntryR\x12fixed64ToStringMap\x12h\n" +
	"\x16sfixed32_to_string_map\x18' \x03(\v23.vanguard.test.v1.AllTypes.Sfixed32ToStringMapEntryR\x13sfixed32ToStringMap\x12h\n" +
	"\x16sfixed64_to_string_map\x18( \x03(\v23.vanguard.test.v1.AllTypes.Sfixed64ToStringMapEntryR\x13sfixed64ToStringMap\x12\\\n" +
	"\x12bool_to_string_map\x18) \x03(\v2/.vanguard.test.v1.AllTypes.BoolToStringMapEntryR\x0fboolToStringMap\x12b\n" +
	"\x14string_to_string_map\x18* \x03(\v21.vanguard.test.v1.AllTypes.StringToStringMapEntryR\x11stringToStringMap\x12H\n" +
	"\n" +
	"double_map\x18+ \x03(\v2).vanguard.test.v1.AllTypes.DoubleMapEntryR\tdoubleMap\x12E\n" +
	"\tfloat_map\x18, \x03(\v2(.vanguard.test.v1.AllTypes.FloatMapEntryR\bfloatMap\x12E\n" +
	"\tint32_map\x18- \x03(\v2(.vanguard.test.v1.AllTypes.Int32MapEntryR\bint32Map\x12E\n" +
	"\tint64_map\x18. \x03(\v2(.vanguard.test.v1.AllTypes.Int64MapEntryR\bint64Map\x12H\n" +
	"\n" +
	"uint32_map\x18/ \x03(\v2).vanguard.test.v1.AllTypes.Uint32MapEntryR\tuint32Map\x12H\n" +
	"\n" +
	"uint64_map\x180 \x03(\v2).vanguard.test.v1.AllTypes.Uint64MapEntryR\tuint64Map\x12H\n" +
	"\n" +
	"sint32_map\x181 \x03(\v2).vanguard.test.v1.AllTypes.Sint32MapEntryR\tsint32Map\x12H\n" +
	"\n" +
	"sint64_map\x182 \x03(\v2).vanguard.test.v1.AllTypes.Sint64MapEntryR\tsint64Map\x12K\n" +
	"\vfixed32_map\x183 \x03(\v2*.vanguard.test.v1.AllTypes.Fixed32MapEntryR\n" +
	"fixed32Map\x12K\n" +
	"\vfixed64_map\x184 \x03(\v2*.vanguard.test.v1.AllTypes.Fixed64MapEntryR\n" +
	"fixed64Map\x12N\n" +
	"\fsfixed32_map\x185 \x03(\v2+.vanguard.test.v1.AllTypes.Sfixed32MapEntryR\vsfixed32Map\x12N\n" +
	"\fsfixed64_map\x186 \x03(\v2+.vanguard.test.v1.AllTypes.Sfixed64MapEntryR\vsfixed64Map\x12B\n" +
	"\bbool_map\x187 \x03(\v2'.vanguard.test.v1.AllTypes.BoolMapEntryR\aboolMap\x12H\n" +
	"\n" +
	"string_map\x188 \x03(\v2).vanguard.test.v1.AllTypes.StringMapEntryR\tstringMap\x12E\n" +
	"\tbytes_map\x189 \x03(\v2(.vanguard.test.v1.AllTypes.BytesMapEntryR\bbytesMap\x12-\n" +
	"\x10opt_double_value\x18: \x01(\x01H\x01R\x0eoptDoubleValue\x88\x01\x01\x12+\n" +
	"\x0fopt_float_value\x18; \x01(\x02H\x02R\roptFloatValue\x88\x01\x01\x12+\n" +
	"\x0fopt_int32_value\x18< \x01(\x05H\x03R\roptInt32Value\x88\x01\x01\x12+\n" +
	"\x0fopt_int64_value\x18= \x01(\x03H\x04R\roptInt64Value\x88\x01\x01\x12-\n" +
	"\x10opt_uint32_value\x18> \x01(\rH\x05R\x0eoptUint32Value\x88\x01\x01\x12-\n" +
	"\x10opt_uint64_value\x18? \x01(\x04H\x06R\x0eoptUint64Value\x88\x01\x01\x12-\n" +
	"\x10opt_sint32_value\x18@ \x01(\x11H\aR\x0eoptSint32Value\x88\x01\x01\x12-\n" +
	"\x10opt_sint64_value\x18A \x01(\x12H\bR\x0eoptSint64Value\x88\x01\x01\x12/\n" +
	"\x11opt_fixed32_value\x18B \x01(\aH\tR\x0foptFixed32Value\x88\x01\x01\x12/\n" +
	"\x11opt_fixed64_value\x18C \x01(\x06H\n" +
	"R\x0foptFixed64Value\x88\x01\x01\x121\n" +
	"\x12opt_sfixed32_value\x18D \x01(\x0fH\vR\x10optSfixed32Value\x88\x01\x01\x121\n" +
	"\x12opt_sfixed64_value\x18E \x01(\x10H\fR\x10optSfixed64Value\x88\x01\x01\x12)\n" +
	"\x0eopt_bool_value\x18F \x01(\bH\rR\foptBoolValue\x88\x01\x01\x12-\n" +
	"\x10opt_string_value\x18G \x01(\tH\x0eR\x0eoptStringValue\x88\x01\x01\x12+\n" +
	"\x0fopt_bytes_value\x18H \x01(\fH\x0fR\roptBytesValue\x88\x01\x01\x127\n" +
	"\tmsg_value\x18I \x01(\v2\x1a.vanguard.test.v1.AllTypesR\bmsgValue\x12>\n" +
	"\n" +
	"enum_value\x18J \x01(\x0e2\x1f.vanguard.test.v1.AllTypes.EnumR\tenumValue\x12C\n" +
	"\ropt_msg_value\x18K \x01(\v2\x1a.vanguard.test.v1.AllTypesH\x10R\voptMsgValue\x88\x01\x01\x12J\n" +
	"\x0eopt_enum_value\x18L \x01(\x0e2\x1f.vanguard.test.v1.AllTypes.EnumH\x11R\foptEnumValue\x88\x01\x01\x125\n" +
	"\bmsg_list\x18M \x03(\v2\x1a.vanguard.test.v1.AllTypesR\amsgList\x12<\n" +
	"\tenum_list\x18N \x03(\x0e2\x1f.vanguard.test.v1.AllTypes.EnumR\benumList\x12?\n" +
	"\amsg_map\x18O \x03(\v2&.vanguard.test.v1.AllTypes.MsgMapEntryR\x06msgMap\x12B\n" +
	"\benum_map\x18P \x03(\v2'.vanguard.test.v1.AllTypes.EnumMapEntryR\aenumMap\x12%\n" +
	"\rdouble_option\x18Q \x01(\x01H\x00R\fdoubleOption\x12#\n" +
	"\ffloat_option\x18R \x01(\x02H\x00R\vfloatOption\x12#\n" +
	"\fint32_option\x18S \x01(\x05H\x00R\vint32Option\x12#\n" +
	"\fint64_option\x18T \x01(\x03H\x00R\vint64Option\x12%\n" +
	"\ruint32_option\x18U \x01(\rH\x00R\fuint32Option\x12%\n" +
	"\ruint64_option\x18V \x01(\x04H\x00R\fuint64Option\x12%\n" +
	"\rsint32_option\x18W \x01(\x11H\x00R\fsint32Option\x12%\n" +
	"\rsint64_option\x18X \x01(\x12H\x00R\fsint64Option\x12'\n" +
	"\x0efixed32_option\x18Y \x01(\aH\x00R\rfixed32Option\x12'\n" +
	"\x0efixed64_option\x18Z \x01(\x06H\x00R\rfixed64Option\x12)\n" +
	"\x0fsfixed32_option\x18[ \x01(\x0fH\x00R\x0esfixed32Option\x12)\n" +
	"\x0fsfixed64_option\x18\\ \x01(\x10H\x00R\x0esfixed64Option\x12!\n" +
	"\vbool_option\x18] \x01(\bH\x00R\n" +
	"boolOption\x12%\n" +
	"\rstring_option\x18^ \x01(\tH\x00R\fstringOption\x12#\n" +
	"\fbytes_option\x18_ \x01(\fH\x00R\vbytesOption\x12;\n" +
	"\n" +
	"msg_option\x18` \x01(\v2\x1a.vanguard.test.v1.AllTypesH\x00R\tmsgOption\x12B\n" +
	"\venum_option\x18a \x01(\x0e2\x1f.vanguard.test.v1.AllTypes.EnumH\x00R\n" +
	"enumOption\x1aC\n" +
	"\x15Int32ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aC\n" +
	"\x15Int64ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x03R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16Uint32ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\rR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16Uint64ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x04R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16Sint32ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x11R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16Sint64ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x12R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aE\n" +
	"\x17Fixed32ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\aR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aE\n" +
	"\x17Fixed64ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x06R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aF\n" +
	"\x18Sfixed32ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x0fR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aF\n" +
	"\x18Sfixed64ToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x10R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aB\n" +
	"\x14BoolToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\bR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1aD\n" +
	"\x16StringToStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a<\n" +
	"\x0eDoubleMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x01R\x05value:\x028\x01\x1a;\n" +
	"\rFloatMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x02R\x05value:\x028\x01\x1a;\n" +
	"\rInt32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a;\n" +
	"\rInt64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x03R\x05value:\x028\x01\x1a<\n" +
	"\x0eUint32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\rR\x05value:\x028\x01\x1a<\n" +
	"\x0eUint64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x04R\x05value:\x028\x01\x1a<\n" +
	"\x0eSint32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x11R\x05value:\x028\x01\x1a<\n" +
	"\x0eSint64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x12R\x05value:\x028\x01\x1a=\n" +
	"\x0fFixed32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\aR\x05value:\x028\x01\x1a=\n" +
	"\x0fFixed64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x06R\x05value:\x028\x01\x1a>\n" +
	"\x10Sfixed32MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x0fR\x05value:\x028\x01\x1a>\n" +
	"\x10Sfixed64MapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x10R\x05value:\x028\x01\x1a:\n" +
	"\fBoolMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\bR\x05value:\x028\x01\x1a<\n" +
	"\x0eStringMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\x1a;\n" +
	"\rBytesMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\fR\x05value:\x028\x01\x1aU\n" +
	"\vMsgMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x120\n" +
	"\x05value\x18\x02 \x01(\v2\x1a.vanguard.test.v1.AllTypesR\x05value:\x028\x01\x1a[\n" +
	"\fEnumMapEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\x0e2\x1f.vanguard.test.v1.AllTypes.EnumR\x05value:\x028\x01\"8\n" +
	"\x04Enum\x12\x14\n" +
	"\x10ENUM_UNSPECIFIED\x10\x00\x12\f\n" +
	"\bENUM_ONE\x10\x01\x12\f\n" +
	"\bENUM_TWO\x10\x02B\b\n" +
	"\x06optionB\x13\n" +
	"\x11_opt_double_valueB\x12\n" +
	"\x10_opt_float_valueB\x12\n" +
	"\x10_opt_int32_valueB\x12\n" +
	"\x10_opt_int64_valueB\x13\n" +
	"\x11_opt_uint32_valueB\x13\n" +
	"\x11_opt_uint64_valueB\x13\n" +
	"\x11_opt_sint32_valueB\x13\n" +
	"\x11_opt_sint64_valueB\x14\n" +
	"\x12_opt_fixed32_valueB\x14\n" +
	"\x12_opt_fixed64_valueB\x15\n" +
	"\x13_opt_sfixed32_valueB\x15\n" +
	"\x13_opt_sfixed64_valueB\x11\n" +
	"\x0f_opt_bool_valueB\x13\n" +
	"\x11_opt_string_valueB\x12\n" +
	"\x10_opt_bytes_valueB\x10\n" +
	"\x0e_opt_msg_valueB\x11\n" +
	"\x0f_opt_enum_valueB\xc1\x01\n" +
	"\x14com.vanguard.test.v1B\tTestProtoP\x01Z<connectrpc.com/vanguard/internal/gen/vanguard/test/v1;testv1\xa2\x02\x03VTX\xaa\x02\x10Vanguard.Test.V1\xca\x02\x10Vanguard\\Test\\V1\xe2\x02\x1cVanguard\\Test\\V1\\GPBMetadata\xea\x02\x12Vanguard::Test::V1b\x06proto3"

var (
	file_vanguard_test_v1_test_proto_rawDescOnce sync.Once
	file_vanguard_test_v1_test_proto_rawDescData []byte
)

func file_vanguard_test_v1_test_proto_rawDescGZIP() []byte {
	file_vanguard_test_v1_test_proto_rawDescOnce.Do(func() {
		file_vanguard_test_v1_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_vanguard_test_v1_test_proto_rawDesc), len(file_vanguard_test_v1_test_proto_rawDesc)))
	})
	return file_vanguard_test_v1_test_proto_rawDescData
}

var file_vanguard_test_v1_test_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_vanguard_test_v1_test_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_vanguard_test_v1_test_proto_goTypes = []any{
	(ParameterValues_Enum)(0),        // 0: vanguard.test.v1.ParameterValues.Enum
	(ParameterValues_Nested_Enum)(0), // 1: vanguard.test.v1.ParameterValues.Nested.Enum
	(AllTypes_Enum)(0),               // 2: vanguard.test.v1.AllTypes.Enum
	(*ParameterValues)(nil),          // 3: vanguard.test.v1.ParameterValues
	(*AllTypes)(nil),                 // 4: vanguard.test.v1.AllTypes
	(*ParameterValues_Nested)(nil),   // 5: vanguard.test.v1.ParameterValues.Nested
	nil,                              // 6: vanguard.test.v1.ParameterValues.StringMapEntry
	nil,                              // 7: vanguard.test.v1.ParameterValues.StringValueMapEntry
	nil,                              // 8: vanguard.test.v1.ParameterValues.EnumMapEntry
	nil,                              // 9: vanguard.test.v1.ParameterValues.NestedMapEntry
	nil,                              // 10: vanguard.test.v1.AllTypes.Int32ToStringMapEntry
	nil,                              // 11: vanguard.test.v1.AllTypes.Int64ToStringMapEntry
	nil,                              // 12: vanguard.test.v1.AllTypes.Uint32ToStringMapEntry
	nil,                              // 13: vanguard.test.v1.AllTypes.Uint64ToStringMapEntry
	nil,                              // 14: vanguard.test.v1.AllTypes.Sint32ToStringMapEntry
	nil,                              // 15: vanguard.test.v1.AllTypes.Sint64ToStringMapEntry
	nil,                              // 16: vanguard.test.v1.AllTypes.Fixed32ToStringMapEntry
	nil,                              // 17: vanguard.test.v1.AllTypes.Fixed64ToStringMapEntry
	nil,                              // 18: vanguard.test.v1.AllTypes.Sfixed32ToStringMapEntry
	nil,                              // 19: vanguard.test.v1.AllTypes.Sfixed64ToStringMapEntry
	nil,                              // 20: vanguard.test.v1.AllTypes.BoolToStringMapEntry
	nil,                              // 21: vanguard.test.v1.AllTypes.StringToStringMapEntry
	nil,                              // 22: vanguard.test.v1.AllTypes.DoubleMapEntry
	nil,                              // 23: vanguard.test.v1.AllTypes.FloatMapEntry
	nil,                              // 24: vanguard.test.v1.AllTypes.Int32MapEntry
	nil,                              // 25: vanguard.test.v1.AllTypes.Int64MapEntry
	nil,                              // 26: vanguard.test.v1.AllTypes.Uint32MapEntry
	nil,                              // 27: vanguard.test.v1.AllTypes.Uint64MapEntry
	nil,                              // 28: vanguard.test.v1.AllTypes.Sint32MapEntry
	nil,                              // 29: vanguard.test.v1.AllTypes.Sint64MapEntry
	nil,                              // 30: vanguard.test.v1.AllTypes.Fixed32MapEntry
	nil,                              // 31: vanguard.test.v1.AllTypes.Fixed64MapEntry
	nil,                              // 32: vanguard.test.v1.AllTypes.Sfixed32MapEntry
	nil,                              // 33: vanguard.test.v1.AllTypes.Sfixed64MapEntry
	nil,                              // 34: vanguard.test.v1.AllTypes.BoolMapEntry
	nil,                              // 35: vanguard.test.v1.AllTypes.StringMapEntry
	nil,                              // 36: vanguard.test.v1.AllTypes.BytesMapEntry
	nil,                              // 37: vanguard.test.v1.AllTypes.MsgMapEntry
	nil,                              // 38: vanguard.test.v1.AllTypes.EnumMapEntry
	(*timestamppb.Timestamp)(nil),    // 39: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),      // 40: google.protobuf.Duration
	(*wrapperspb.BoolValue)(nil),     // 41: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),    // 42: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),    // 43: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil),   // 44: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil),   // 45: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),    // 46: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil),   // 47: google.protobuf.DoubleValue
	(*wrapperspb.BytesValue)(nil),    // 48: google.protobuf.BytesValue
	(*wrapperspb.StringValue)(nil),   // 49: google.protobuf.StringValue
	(*fieldmaskpb.FieldMask)(nil),    // 50: google.protobuf.FieldMask
	(*structpb.Struct)(nil),          // 51: google.protobuf.Struct
	(*structpb.Value)(nil),           // 52: google.protobuf.Value
}
var file_vanguard_test_v1_test_proto_depIdxs = []int32{
	39, // 0: vanguard.test.v1.ParameterValues.timestamp:type_name -> google.protobuf.Timestamp
	40, // 1: vanguard.test.v1.ParameterValues.duration:type_name -> google.protobuf.Duration
	41, // 2: vanguard.test.v1.ParameterValues.bool_value_wrapper:type_name -> google.protobuf.BoolValue
	42, // 3: vanguard.test.v1.ParameterValues.int32_value_wrapper:type_name -> google.protobuf.Int32Value
	43, // 4: vanguard.test.v1.ParameterValues.int64_value_wrapper:type_name -> google.protobuf.Int64Value
	44, // 5: vanguard.test.v1.ParameterValues.uint32_value_wrapper:type_name -> google.protobuf.UInt32Value
	45, // 6: vanguard.test.v1.ParameterValues.uint64_value_wrapper:type_name -> google.protobuf.UInt64Value
	46, // 7: vanguard.test.v1.ParameterValues.float_value_wrapper:type_name -> google.protobuf.FloatValue
	47, // 8: vanguard.test.v1.ParameterValues.double_value_wrapper:type_name -> google.protobuf.DoubleValue
	48, // 9: vanguard.test.v1.ParameterValues.bytes_value_wrapper:type_name -> google.protobuf.BytesValue
	49, // 10: vanguard.test.v1.ParameterValues.string_value_wrapper:type_name -> google.protobuf.StringValue
	50, // 11: vanguard.test.v1.ParameterValues.field_mask:type_name -> google.protobuf.FieldMask
	0,  // 12: vanguard.test.v1.ParameterValues.enum_value:type_name -> vanguard.test.v1.ParameterValues.Enum
	0,  // 13: vanguard.test.v1.ParameterValues.enum_list:type_name -> vanguard.test.v1.ParameterValues.Enum
	47, // 14: vanguard.test.v1.ParameterValues.double_value_list:type_name -> google.protobuf.DoubleValue
	47, // 15: vanguard.test.v1.ParameterValues.oneof_double_value_wrapper:type_name -> google.protobuf.DoubleValue
	0,  // 16: vanguard.test.v1.ParameterValues.oneof_enum_value:type_name -> vanguard.test.v1.ParameterValues.Enum
	5,  // 17: vanguard.test.v1.ParameterValues.nested:type_name -> vanguard.test.v1.ParameterValues.Nested
	3,  // 18: vanguard.test.v1.ParameterValues.recursive:type_name -> vanguard.test.v1.ParameterValues
	6,  // 19: vanguard.test.v1.ParameterValues.string_map:type_name -> vanguard.test.v1.ParameterValues.StringMapEntry
	7,  // 20: vanguard.test.v1.ParameterValues.string_value_map:type_name -> vanguard.test.v1.ParameterValues.StringValueMapEntry
	8,  // 21: vanguard.test.v1.ParameterValues.enum_map:type_name -> vanguard.test.v1.ParameterValues.EnumMapEntry
	9,  // 22: vanguard.test.v1.ParameterValues.nested_map:type_name -> vanguard.test.v1.ParameterValues.NestedMapEntry
	51, // 23: vanguard.test.v1.ParameterValues.struct_value:type_name -> google.protobuf.Struct
	52, // 24: vanguard.test.v1.ParameterValues.value:type_name -> google.protobuf.Value
	3,  // 25: vanguard.test.v1.ParameterValues.recursive_list:type_name -> vanguard.test.v1.ParameterValues
	10, // 26: vanguard.test.v1.AllTypes.int32_to_string_map:type_name -> vanguard.test.v1.AllTypes.Int32ToStringMapEntry
	11, // 27: vanguard.test.v1.AllTypes.int64_to_string_map:type_name -> vanguard.test.v1.AllTypes.Int64ToStringMapEntry
	12, // 28: vanguard.test.v1.AllTypes.uint32_to_string_map:type_name -> vanguard.test.v1.AllTypes.Uint32ToStringMapEntry
	13, // 29: vanguard.test.v1.AllTypes.uint64_to_string_map:type_name -> vanguard.test.v1.AllTypes.Uint64ToStringMapEntry
	14, // 30: vanguard.test.v1.AllTypes.sint32_to_string_map:type_name -> vanguard.test.v1.AllTypes.Sint32ToStringMapEntry
	15, // 31: vanguard.test.v1.AllTypes.sint64_to_string_map:type_name -> vanguard.test.v1.AllTypes.Sint64ToStringMapEntry
	16, // 32: vanguard.test.v1.AllTypes.fixed32_to_string_map:type_name -> vanguard.test.v1.AllTypes.Fixed32ToStringMapEntry
	17, // 33: vanguard.test.v1.AllTypes.fixed64_to_string_map:type_name -> vanguard.test.v1.AllTypes.Fixed64ToStringMapEntry
	18, // 34: vanguard.test.v1.AllTypes.sfixed32_to_string_map:type_name -> vanguard.test.v1.AllTypes.Sfixed32ToStringMapEntry
	19, // 35: vanguard.test.v1.AllTypes.sfixed64_to_string_map:type_name -> vanguard.test.v1.AllTypes.Sfixed64ToStringMapEntry
	20, // 36: vanguard.test.v1.AllTypes.bool_to_string_map:type_name -> vanguard.test.v1.AllTypes.BoolToStringMapEntry
	21, // 37: vanguard.test.v1.AllTypes.string_to_string_map:type_name -> vanguard.test.v1.AllTypes.StringToStringMapEntry
	22, // 38: vanguard.test.v1.AllTypes.double_map:type_name -> vanguard.test.v1.AllTypes.DoubleMapEntry
	23, // 39: vanguard.test.v1.AllTypes.float_map:type_name -> vanguard.test.v1.AllTypes.FloatMapEntry
	24, // 40: vanguard.test.v1.AllTypes.int32_map:type_name -> vanguard.test.v1.AllTypes.Int32MapEntry
	25, // 41: vanguard.test.v1.AllTypes.int64_map:type_name -> vanguard.test.v1.AllTypes.Int64MapEntry
	26, // 42: vanguard.test.v1.AllTypes.uint32_map:type_name -> vanguard.test.v1.AllTypes.Uint32MapEntry
	27, // 43: vanguard.test.v1.AllTypes.uint64_map:type_name -> vanguard.test.v1.AllTypes.Uint64MapEntry
	28, // 44: vanguard.test.v1.AllTypes.sint32_map:type_name -> vanguard.test.v1.AllTypes.Sint32MapEntry
	29, // 45: vanguard.test.v1.AllTypes.sint64_map:type_name -> vanguard.test.v1.AllTypes.Sint64MapEntry
	30, // 46: vanguard.test.v1.AllTypes.fixed32_map:type_name -> vanguard.test.v1.AllTypes.Fixed32MapEntry
	31, // 47: vanguard.test.v1.AllTypes.fixed64_map:type_name -> vanguard.test.v1.AllTypes.Fixed64MapEntry
	32, // 48: vanguard.test.v1.AllTypes.sfixed32_map:type_name -> vanguard.test.v1.AllTypes.Sfixed32MapEntry
	33, // 49: vanguard.test.v1.AllTypes.sfixed64_map:type_name -> vanguard.test.v1.AllTypes.Sfixed64MapEntry
	34, // 50: vanguard.test.v1.AllTypes.bool_map:type_name -> vanguard.test.v1.AllTypes.BoolMapEntry
	35, // 51: vanguard.test.v1.AllTypes.string_map:type_name -> vanguard.test.v1.AllTypes.StringMapEntry
	36, // 52: vanguard.test.v1.AllTypes.bytes_map:type_name -> vanguard.test.v1.AllTypes.BytesMapEntry
	4,  // 53: vanguard.test.v1.AllTypes.msg_value:type_name -> vanguard.test.v1.AllTypes
	2,  // 54: vanguard.test.v1.AllTypes.enum_value:type_name -> vanguard.test.v1.AllTypes.Enum
	4,  // 55: vanguard.test.v1.AllTypes.opt_msg_value:type_name -> vanguard.test.v1.AllTypes
	2,  // 56: vanguard.test.v1.AllTypes.opt_enum_value:type_name -> vanguard.test.v1.AllTypes.Enum
	4,  // 57: vanguard.test.v1.AllTypes.msg_list:type_name -> vanguard.test.v1.AllTypes
	2,  // 58: vanguard.test.v1.AllTypes.enum_list:type_name -> vanguard.test.v1.AllTypes.Enum
	37, // 59: vanguard.test.v1.AllTypes.msg_map:type_name -> vanguard.test.v1.AllTypes.MsgMapEntry
	38, // 60: vanguard.test.v1.AllTypes.enum_map:type_name -> vanguard.test.v1.AllTypes.EnumMapEntry
	4,  // 61: vanguard.test.v1.AllTypes.msg_option:type_name -> vanguard.test.v1.AllTypes
	2,  // 62: vanguard.test.v1.AllTypes.enum_option:type_name -> vanguard.test.v1.AllTypes.Enum
	47, // 63: vanguard.test.v1.ParameterValues.Nested.double_value_wrapper:type_name -> google.protobuf.DoubleValue
	1,  // 64: vanguard.test.v1.ParameterValues.Nested.enum_value:type_name -> vanguard.test.v1.ParameterValues.Nested.Enum
	49, // 65: vanguard.test.v1.ParameterValues.StringValueMapEntry.value:type_name -> google.protobuf.StringValue
	0,  // 66: vanguard.test.v1.ParameterValues.EnumMapEntry.value:type_name -> vanguard.test.v1.ParameterValues.Enum
	5,  // 67: vanguard.test.v1.ParameterValues.NestedMapEntry.value:type_name -> vanguard.test.v1.ParameterValues.Nested
	4,  // 68: vanguard.test.v1.AllTypes.MsgMapEntry.value:type_name -> vanguard.test.v1.AllTypes
	2,  // 69: vanguard.test.v1.AllTypes.EnumMapEntry.value:type_name -> vanguard.test.v1.AllTypes.Enum
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_vanguard_test_v1_test_proto_init() }
func file_vanguard_test_v1_test_proto_init() {
	if File_vanguard_test_v1_test_proto != nil {
		return
	}
	file_vanguard_test_v1_test_proto_msgTypes[0].OneofWrappers = []any{
		(*ParameterValues_OneofDoubleValue)(nil),
		(*ParameterValues_OneofDoubleValueWrapper)(nil),
		(*ParameterValues_OneofEnumValue)(nil),
	}
	file_vanguard_test_v1_test_proto_msgTypes[1].OneofWrappers = []any{
		(*AllTypes_DoubleOption)(nil),
		(*AllTypes_FloatOption)(nil),
		(*AllTypes_Int32Option)(nil),
		(*AllTypes_Int64Option)(nil),
		(*AllTypes_Uint32Option)(nil),
		(*AllTypes_Uint64Option)(nil),
		(*AllTypes_Sint32Option)(nil),
		(*AllTypes_Sint64Option)(nil),
		(*AllTypes_Fixed32Option)(nil),
		(*AllTypes_Fixed64Option)(nil),
		(*AllTypes_Sfixed32Option)(nil),
		(*AllTypes_Sfixed64Option)(nil),
		(*AllTypes_BoolOption)(nil),
		(*AllTypes_StringOption)(nil),
		(*AllTypes_BytesOption)(nil),
		(*AllTypes_MsgOption)(nil),
		(*AllTypes_EnumOption)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_vanguard_test_v1_test_proto_rawDesc), len(file_vanguard_test_v1_test_proto_rawDesc)),
			NumEnums:      3,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_vanguard_test_v1_test_proto_goTypes,
		DependencyIndexes: file_vanguard_test_v1_test_proto_depIdxs,
		EnumInfos:         file_vanguard_test_v1_test_proto_enumTypes,
		MessageInfos:      file_vanguard_test_v1_test_proto_msgTypes,
	}.Build()
	File_vanguard_test_v1_test_proto = out.File
	file_vanguard_test_v1_test_proto_goTypes = nil
	file_vanguard_test_v1_test_proto_depIdxs = nil
}
