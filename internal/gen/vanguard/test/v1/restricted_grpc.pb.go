// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vanguard/test/v1/restricted.proto

package testv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RestrictedService_BidiStream_FullMethodName   = "/vanguard.test.v1.RestrictedService/BidiStream"
	RestrictedService_ClientStream_FullMethodName = "/vanguard.test.v1.RestrictedService/ClientStream"
	RestrictedService_ServerStream_FullMethodName = "/vanguard.test.v1.RestrictedService/ServerStream"
)

// RestrictedServiceClient is the client API for RestrictedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RestrictedServiceClient interface {
	// BidiStream is a bidi stream, unsupported request and response type.
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (RestrictedService_BidiStreamClient, error)
	// ClientStream is a client stream, unsupported request type.
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (RestrictedService_ClientStreamClient, error)
	// ServerStream is a server stream, unsupported response type.
	ServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (RestrictedService_ServerStreamClient, error)
}

type restrictedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRestrictedServiceClient(cc grpc.ClientConnInterface) RestrictedServiceClient {
	return &restrictedServiceClient{cc}
}

func (c *restrictedServiceClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (RestrictedService_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RestrictedService_ServiceDesc.Streams[0], RestrictedService_BidiStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &restrictedServiceBidiStreamClient{stream}
	return x, nil
}

type RestrictedService_BidiStreamClient interface {
	Send(*emptypb.Empty) error
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type restrictedServiceBidiStreamClient struct {
	grpc.ClientStream
}

func (x *restrictedServiceBidiStreamClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *restrictedServiceBidiStreamClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restrictedServiceClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (RestrictedService_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RestrictedService_ServiceDesc.Streams[1], RestrictedService_ClientStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &restrictedServiceClientStreamClient{stream}
	return x, nil
}

type RestrictedService_ClientStreamClient interface {
	Send(*emptypb.Empty) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type restrictedServiceClientStreamClient struct {
	grpc.ClientStream
}

func (x *restrictedServiceClientStreamClient) Send(m *emptypb.Empty) error {
	return x.ClientStream.SendMsg(m)
}

func (x *restrictedServiceClientStreamClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *restrictedServiceClient) ServerStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (RestrictedService_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &RestrictedService_ServiceDesc.Streams[2], RestrictedService_ServerStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &restrictedServiceServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RestrictedService_ServerStreamClient interface {
	Recv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type restrictedServiceServerStreamClient struct {
	grpc.ClientStream
}

func (x *restrictedServiceServerStreamClient) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RestrictedServiceServer is the server API for RestrictedService service.
// All implementations must embed UnimplementedRestrictedServiceServer
// for forward compatibility
type RestrictedServiceServer interface {
	// BidiStream is a bidi stream, unsupported request and response type.
	BidiStream(RestrictedService_BidiStreamServer) error
	// ClientStream is a client stream, unsupported request type.
	ClientStream(RestrictedService_ClientStreamServer) error
	// ServerStream is a server stream, unsupported response type.
	ServerStream(*emptypb.Empty, RestrictedService_ServerStreamServer) error
	mustEmbedUnimplementedRestrictedServiceServer()
}

// UnimplementedRestrictedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRestrictedServiceServer struct {
}

func (UnimplementedRestrictedServiceServer) BidiStream(RestrictedService_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedRestrictedServiceServer) ClientStream(RestrictedService_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (UnimplementedRestrictedServiceServer) ServerStream(*emptypb.Empty, RestrictedService_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (UnimplementedRestrictedServiceServer) mustEmbedUnimplementedRestrictedServiceServer() {}

// UnsafeRestrictedServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RestrictedServiceServer will
// result in compilation errors.
type UnsafeRestrictedServiceServer interface {
	mustEmbedUnimplementedRestrictedServiceServer()
}

func RegisterRestrictedServiceServer(s grpc.ServiceRegistrar, srv RestrictedServiceServer) {
	s.RegisterService(&RestrictedService_ServiceDesc, srv)
}

func _RestrictedService_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RestrictedServiceServer).BidiStream(&restrictedServiceBidiStreamServer{stream})
}

type RestrictedService_BidiStreamServer interface {
	Send(*emptypb.Empty) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type restrictedServiceBidiStreamServer struct {
	grpc.ServerStream
}

func (x *restrictedServiceBidiStreamServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *restrictedServiceBidiStreamServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RestrictedService_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RestrictedServiceServer).ClientStream(&restrictedServiceClientStreamServer{stream})
}

type RestrictedService_ClientStreamServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*emptypb.Empty, error)
	grpc.ServerStream
}

type restrictedServiceClientStreamServer struct {
	grpc.ServerStream
}

func (x *restrictedServiceClientStreamServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *restrictedServiceClientStreamServer) Recv() (*emptypb.Empty, error) {
	m := new(emptypb.Empty)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _RestrictedService_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RestrictedServiceServer).ServerStream(m, &restrictedServiceServerStreamServer{stream})
}

type RestrictedService_ServerStreamServer interface {
	Send(*emptypb.Empty) error
	grpc.ServerStream
}

type restrictedServiceServerStreamServer struct {
	grpc.ServerStream
}

func (x *restrictedServiceServerStreamServer) Send(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

// RestrictedService_ServiceDesc is the grpc.ServiceDesc for RestrictedService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RestrictedService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanguard.test.v1.RestrictedService",
	HandlerType: (*RestrictedServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BidiStream",
			Handler:       _RestrictedService_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ClientStream",
			Handler:       _RestrictedService_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _RestrictedService_ServerStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vanguard/test/v1/restricted.proto",
}
