// Copyright 2023-2024 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: vanguard/test/v1/restricted.proto

package testv1connect

import (
	connect "connectrpc.com/connect"
	v1 "connectrpc.com/vanguard/internal/gen/vanguard/test/v1"
	context "context"
	errors "errors"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// RestrictedServiceName is the fully-qualified name of the RestrictedService service.
	RestrictedServiceName = "vanguard.test.v1.RestrictedService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// RestrictedServiceBidiStreamProcedure is the fully-qualified name of the RestrictedService's
	// BidiStream RPC.
	RestrictedServiceBidiStreamProcedure = "/vanguard.test.v1.RestrictedService/BidiStream"
	// RestrictedServiceClientStreamProcedure is the fully-qualified name of the RestrictedService's
	// ClientStream RPC.
	RestrictedServiceClientStreamProcedure = "/vanguard.test.v1.RestrictedService/ClientStream"
	// RestrictedServiceServerStreamProcedure is the fully-qualified name of the RestrictedService's
	// ServerStream RPC.
	RestrictedServiceServerStreamProcedure = "/vanguard.test.v1.RestrictedService/ServerStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	restrictedServiceServiceDescriptor            = v1.File_vanguard_test_v1_restricted_proto.Services().ByName("RestrictedService")
	restrictedServiceBidiStreamMethodDescriptor   = restrictedServiceServiceDescriptor.Methods().ByName("BidiStream")
	restrictedServiceClientStreamMethodDescriptor = restrictedServiceServiceDescriptor.Methods().ByName("ClientStream")
	restrictedServiceServerStreamMethodDescriptor = restrictedServiceServiceDescriptor.Methods().ByName("ServerStream")
)

// RestrictedServiceClient is a client for the vanguard.test.v1.RestrictedService service.
type RestrictedServiceClient interface {
	// BidiStream is a bidi stream, unsupported request and response type.
	BidiStream(context.Context) *connect.BidiStreamForClient[emptypb.Empty, emptypb.Empty]
	// ClientStream is a client stream, unsupported request type.
	ClientStream(context.Context) *connect.ClientStreamForClient[emptypb.Empty, emptypb.Empty]
	// ServerStream is a server stream, unsupported response type.
	ServerStream(context.Context, *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[emptypb.Empty], error)
}

// NewRestrictedServiceClient constructs a client for the vanguard.test.v1.RestrictedService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewRestrictedServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) RestrictedServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &restrictedServiceClient{
		bidiStream: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+RestrictedServiceBidiStreamProcedure,
			connect.WithSchema(restrictedServiceBidiStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		clientStream: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+RestrictedServiceClientStreamProcedure,
			connect.WithSchema(restrictedServiceClientStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		serverStream: connect.NewClient[emptypb.Empty, emptypb.Empty](
			httpClient,
			baseURL+RestrictedServiceServerStreamProcedure,
			connect.WithSchema(restrictedServiceServerStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// restrictedServiceClient implements RestrictedServiceClient.
type restrictedServiceClient struct {
	bidiStream   *connect.Client[emptypb.Empty, emptypb.Empty]
	clientStream *connect.Client[emptypb.Empty, emptypb.Empty]
	serverStream *connect.Client[emptypb.Empty, emptypb.Empty]
}

// BidiStream calls vanguard.test.v1.RestrictedService.BidiStream.
func (c *restrictedServiceClient) BidiStream(ctx context.Context) *connect.BidiStreamForClient[emptypb.Empty, emptypb.Empty] {
	return c.bidiStream.CallBidiStream(ctx)
}

// ClientStream calls vanguard.test.v1.RestrictedService.ClientStream.
func (c *restrictedServiceClient) ClientStream(ctx context.Context) *connect.ClientStreamForClient[emptypb.Empty, emptypb.Empty] {
	return c.clientStream.CallClientStream(ctx)
}

// ServerStream calls vanguard.test.v1.RestrictedService.ServerStream.
func (c *restrictedServiceClient) ServerStream(ctx context.Context, req *connect.Request[emptypb.Empty]) (*connect.ServerStreamForClient[emptypb.Empty], error) {
	return c.serverStream.CallServerStream(ctx, req)
}

// RestrictedServiceHandler is an implementation of the vanguard.test.v1.RestrictedService service.
type RestrictedServiceHandler interface {
	// BidiStream is a bidi stream, unsupported request and response type.
	BidiStream(context.Context, *connect.BidiStream[emptypb.Empty, emptypb.Empty]) error
	// ClientStream is a client stream, unsupported request type.
	ClientStream(context.Context, *connect.ClientStream[emptypb.Empty]) (*connect.Response[emptypb.Empty], error)
	// ServerStream is a server stream, unsupported response type.
	ServerStream(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[emptypb.Empty]) error
}

// NewRestrictedServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewRestrictedServiceHandler(svc RestrictedServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	restrictedServiceBidiStreamHandler := connect.NewBidiStreamHandler(
		RestrictedServiceBidiStreamProcedure,
		svc.BidiStream,
		connect.WithSchema(restrictedServiceBidiStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	restrictedServiceClientStreamHandler := connect.NewClientStreamHandler(
		RestrictedServiceClientStreamProcedure,
		svc.ClientStream,
		connect.WithSchema(restrictedServiceClientStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	restrictedServiceServerStreamHandler := connect.NewServerStreamHandler(
		RestrictedServiceServerStreamProcedure,
		svc.ServerStream,
		connect.WithSchema(restrictedServiceServerStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/vanguard.test.v1.RestrictedService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case RestrictedServiceBidiStreamProcedure:
			restrictedServiceBidiStreamHandler.ServeHTTP(w, r)
		case RestrictedServiceClientStreamProcedure:
			restrictedServiceClientStreamHandler.ServeHTTP(w, r)
		case RestrictedServiceServerStreamProcedure:
			restrictedServiceServerStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedRestrictedServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedRestrictedServiceHandler struct{}

func (UnimplementedRestrictedServiceHandler) BidiStream(context.Context, *connect.BidiStream[emptypb.Empty, emptypb.Empty]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vanguard.test.v1.RestrictedService.BidiStream is not implemented"))
}

func (UnimplementedRestrictedServiceHandler) ClientStream(context.Context, *connect.ClientStream[emptypb.Empty]) (*connect.Response[emptypb.Empty], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("vanguard.test.v1.RestrictedService.ClientStream is not implemented"))
}

func (UnimplementedRestrictedServiceHandler) ServerStream(context.Context, *connect.Request[emptypb.Empty], *connect.ServerStream[emptypb.Empty]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("vanguard.test.v1.RestrictedService.ServerStream is not implemented"))
}
