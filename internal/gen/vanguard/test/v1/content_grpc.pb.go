// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: vanguard/test/v1/content.proto

package testv1

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ContentService_Index_FullMethodName     = "/vanguard.test.v1.ContentService/Index"
	ContentService_Upload_FullMethodName    = "/vanguard.test.v1.ContentService/Upload"
	ContentService_Download_FullMethodName  = "/vanguard.test.v1.ContentService/Download"
	ContentService_Subscribe_FullMethodName = "/vanguard.test.v1.ContentService/Subscribe"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	// Index returns a html index page at the given path.
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	// Upload a file to the given path.
	Upload(ctx context.Context, opts ...grpc.CallOption) (ContentService_UploadClient, error)
	// Download a file from the given path.
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ContentService_DownloadClient, error)
	// Subscribe to updates for changes to content.
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (ContentService_SubscribeClient, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, ContentService_Index_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Upload(ctx context.Context, opts ...grpc.CallOption) (ContentService_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[0], ContentService_Upload_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceUploadClient{stream}
	return x, nil
}

type ContentService_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type contentServiceUploadClient struct {
	grpc.ClientStream
}

func (x *contentServiceUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentServiceUploadClient) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (ContentService_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[1], ContentService_Download_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ContentService_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type contentServiceDownloadClient struct {
	grpc.ClientStream
}

func (x *contentServiceDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *contentServiceClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (ContentService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &ContentService_ServiceDesc.Streams[2], ContentService_Subscribe_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &contentServiceSubscribeClient{stream}
	return x, nil
}

type ContentService_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type contentServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *contentServiceSubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *contentServiceSubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	// Index returns a html index page at the given path.
	Index(context.Context, *IndexRequest) (*httpbody.HttpBody, error)
	// Upload a file to the given path.
	Upload(ContentService_UploadServer) error
	// Download a file from the given path.
	Download(*DownloadRequest, ContentService_DownloadServer) error
	// Subscribe to updates for changes to content.
	Subscribe(ContentService_SubscribeServer) error
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) Index(context.Context, *IndexRequest) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedContentServiceServer) Upload(ContentService_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedContentServiceServer) Download(*DownloadRequest, ContentService_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedContentServiceServer) Subscribe(ContentService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentServiceServer).Upload(&contentServiceUploadServer{stream})
}

type ContentService_UploadServer interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type contentServiceUploadServer struct {
	grpc.ServerStream
}

func (x *contentServiceUploadServer) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentServiceUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ContentService_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ContentServiceServer).Download(m, &contentServiceDownloadServer{stream})
}

type ContentService_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type contentServiceDownloadServer struct {
	grpc.ServerStream
}

func (x *contentServiceDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ContentService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ContentServiceServer).Subscribe(&contentServiceSubscribeServer{stream})
}

type ContentService_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type contentServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *contentServiceSubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *contentServiceSubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vanguard.test.v1.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Index",
			Handler:    _ContentService_Index_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Upload",
			Handler:       _ContentService_Upload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "Download",
			Handler:       _ContentService_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _ContentService_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "vanguard/test/v1/content.proto",
}
