// Copyright 2023 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package stripe.v1;

import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/wrappers.proto";

service PaymentIntentsService {
  // Creates a PaymentIntent object.
  rpc CreatePaymentIntent(CreatePaymentIntentRequest) returns (PaymentIntent) {
    option (google.api.http) = {
      post : "/v1/payment_intents"
    };
  }
  // Retrieves the details of a PaymentIntent that has previously been created.
  rpc GetPaymentIntent(GetPaymentIntentRequest) returns (PaymentIntent) {
    option (google.api.http) = {
      get : "/v1/payment_intents/{id}"
    };
    option idempotency_level = NO_SIDE_EFFECTS;
  }
}

message PaymentIntent {
  // Unique identifier for the object.
  string id = 1;
  // String representing the object’s type. Objects of the same type share the
  // same value.
  string object = 2;
  // Amount intended to be collected by this PaymentIntent.
  int64 amount = 3;
  // Amount that can be captured from this PaymentIntent.
  int64 amount_capturable = 4;
  message AmountDetails {
    message Tip {
      // Portion of the amount that corresponds to a tip.
      int64 amount = 1;
    }
    // Tip included in the amount.
    Tip tip = 1;
  }
  // Details about items that the amount includes.
  AmountDetails amount_details = 5;
  // Amount that this PaymentIntent collects.
  int64 amount_received = 6;
  // ID of the Connect application that created the PaymentIntent. Connect only.
  optional string application = 7;
  // The amount of the application fee (if any) for the resulting payment.
  // Connect only.
  optional int64 application_fee_amount = 8;
  // Populated when status is canceled, this is the time at which the
  // PaymentIntent was canceled.
  optional int64 canceled_at = 9;
  // Reason for cancellation of this PaymentIntent, either user-provided
  // (duplicate, fraudulent, requested_by_customer, or abandoned) or generated
  // by Stripe internally (failed_invoice, void_invoice, or automatic).
  string cancellation_reason = 10;
  // Capture method of this PaymentIntent, one of automatic or manual.
  string capture_method = 11;
  // The client secret of this PaymentIntent. Used for client-side retrieval
  // using a publishable key.
  string client_secret = 12;
  // Confirmation method of this PaymentIntent, one of automatic or manual.
  string confirmation_method = 13;
  // Time at which the object was created. Measured in seconds since the Unix
  // epoch.
  int64 created = 14;
  // Three-letter ISO currency code, in lowercase. Must be a supported currency.
  string currency = 15;
  // ID of the Customer this PaymentIntent belongs to, if one exists.
  optional string customer = 16;
  // An arbitrary string attached to the object.
  string description = 17;
  // ID of the invoice that created this PaymentIntent, if it exists.
  optional string invoice = 18;
  // The payment error encountered in the previous PaymentIntent confirmation.
  message LastPaymentError {
    // The type of error returned. One of api_error, card_error,
    // idempotency_error, or invalid_request_error
    string type = 1;
    // For card errors, the ID of the failed charge.
    string charge = 2;
    // For some errors that could be handled programmatically, a short string
    // indicating the error code reported.
    string code = 3;
    // For card errors resulting from a card issuer decline, a short string
    // indicating the card issuer’s reason for the decline if they provide one.
    string decline_code = 4;
    // A URL to more information about the error code reported.
    string doc_url = 5;
    // A human-readable message providing more details about the error. For card
    // errors, these messages can be shown to your users.
    string message = 6;
    // If the error is parameter-specific, the parameter related to the error.
    // For example, you can use this to display a message near the correct form
    // field.
    string param = 7;
    // The PaymentMethod object for errors returned on a request involving a
    // PaymentMethod.
    PaymentMethod payment_method = 8;
    // If the error is specific to the type of payment method, the payment
    // method type that had a problem. This field is only populated for
    // invoice-related errors.
    string payment_method_type = 9;
  }
  LastPaymentError last_payment_error = 19;
  // Has the value true if the object exists in live mode or the value false if
  // the object exists in test mode.
  bool live_mode = 21;
  // Set of key-value pairs that you can attach to an object. This can be
  // useful for storing additional information about the object in a structured
  // format.
  map<string, string> metadata = 22;
  // If present, this property tells you what actions you need to take in order
  // for your customer to fulfill a payment using the provided source.
  google.protobuf.Struct next_action = 23;
  optional string on_behalf_of = 24;
  optional string payment_method = 25;
  message PaymentMethodConfigurationDetails {
    // ID of the payment method configuration used.
    string id = 1;
    // ID of the parent payment method configuration used.
    string parent = 2;
  }
  PaymentMethodConfigurationDetails payment_method_configuration_details = 26;
  message PaymentMethodOptions {
    message Card {
      string capture_method = 1;
      message Installments {
        message Plan {
          int32 count = 1;
          int32 interval = 2;
          string type = 3;
        }
        // Installment plans that may be selected for this PaymentIntent.
        repeated Plan available_plans = 1;
        // Whether installments are enabled for this PaymentIntent.
        bool enabled = 2;
        // The selected installment plan for this PaymentIntent.
        Plan plan = 3;
      }
      Installments installments = 2;
      message MandateOptions {
        // TODO
      }
      MandateOptions mandate_options = 3;
      optional string network = 4;
      optional string request_three_d_secure = 5;
      optional string setup_future_usage = 6;
      // Provides information about a card payment that customers see on their
      // statements.
      string statement_descriptor_suffix_kana = 7;
      // Provides information about a card payment that customers see on their
      // statements.
      string statement_descriptor_suffix_kanji = 8;
    }
    Card card = 1;

    // TODO: Others
  }
  PaymentMethodOptions payment_method_options = 27;
  // The list of payment method types (e.g. card) that this PaymentIntent is
  // allowed to use.
  repeated string payment_method_types = 28;
  message Processing {
    message Card {
      message CustomerNotification {
        // Whether customer approval has been requested for this payment.
        bool approval_requested = 1;
        // If customer approval is required, they need to provide approval
        // before this time.
        int64 completes_at = 2;
      }
      CustomerNotification customer_notification = 1;
    }
    Card card = 1;
    // Type of the payment method for which payment is in processing state, one
    // of card.
    string customer_notification = 2;
  }
  Processing processing = 29;
  // Email address that the receipt for the resulting payment will be sent to
  optional string receipt_email = 30;
  // ...
  optional string redaction = 31;
  // ID of the review associated with this PaymentIntent, if any.
  optional string review = 32;
  // For non-card charges, you can use this value as the complete description
  // that appears on your customers’ statements. Must contain at least one
  // letter, maximum 22 characters.
  optional string statement_descriptor = 33;
  optional string statement_descriptor_suffix = 34;
  optional string setup_future_usage = 35;
  // Shipping information for this PaymentIntent.
  message Shipping {
    // Shipping address.
    message Address {
      // City, district, suburb, town, or village.
      string city = 1;
      // Two-letter country code (ISO 3166-1 alpha-2).
      string country = 2;
      // Address line 1 (e.g., street, PO Box, or company name).
      string line1 = 3;
      // Address line 2 (e.g., apartment, suite, unit, or building).
      string line2 = 4;
      // ZIP or postal code.
      string postal_code = 5;
      // State, county, province, or region.
      string state = 6;
    }
    Address address = 1;
    // Recipient name.
    string name = 2;
    // The delivery service that shipped a physical product, such as Fedex, UPS,
    // USPS, etc.
    string carrier = 3;
    // Recipient phone (including extension).
    string phone = 4;
    // The tracking number for a physical product, obtained from the delivery
    // service. If multiple tracking numbers were generated for this purchase,
    // please separate them with commas.
    string tracking_number = 5;
  }
  Shipping shipping = 36;
  // Status of this PaymentIntent, one of requires_payment_method,
  // requires_confirmation, requires_action, processing, requires_capture,
  // canceled, or succeeded. Read more about each PaymentIntent status.
  // enum Status {
  //  unspecifed = 0;
  //  requires_payment_method = 1;
  //  requires_confirmation = 2;
  //  requires_action = 3;
  //  processing = 4;
  //  requires_capture = 5;
  //  canceled = 6;
  //  succeeded = 7;
  //}
  string status = 37;

  message TransferData {
    // Amount intended to be collected by this PaymentIntent.
    int64 amount = 1;
    // The account (if any) that the payment is attributed to for tax reporting,
    // and where funds from the payment are transferred to after payment
    // success.
    string destination = 2;
  }
  // The data that automatically creates a Transfer after the payment finalizes.
  // Learn more about the use case for connected accounts.
  TransferData transfer_data = 38;
  // A string that identifies the resulting payment as part of a group. Learn
  // more about the use case for connected accounts.
  optional string transfer_group = 39;
}

message CreatePaymentIntentRequest {
  // Amount intended to be collected by this PaymentIntent.
  int64 amount = 1;
  // Three-letter ISO currency code, in lowercase. Must be a supported currency.
  string currency = 2;
  // When you enable this parameter, this PaymentIntent accepts payment methods
  // that you enable in the Dashboard and that are compatible with this
  // PaymentIntent’s other parameters.
  message AutomaticPaymentMethods {
    // Whether this feature is enabled.
    bool enabled = 1;
    // Controls whether this PaymentIntent will accept redirect-based payment
    // methods.
    string allow_redirects = 2;
  }
  AutomaticPaymentMethods automatic_payment_methods = 3;
  // Set to true to attempt to confirm this PaymentIntent this PaymentIntent
  // immediately.
  bool confirm = 4;
  // ID of the Customer this PaymentIntent belongs to, if one exists.
  string customer = 5;
  // An arbitrary string attached to the object
  string description = 6;
  // Set of key-value pairs that you can attach to an object.
  map<string, string> metadata = 7;
  // Set to true to indicate that the customer isn’t in your checkout flow
  // during this payment attempt and can’t authenticate
  bool off_session = 8;
  // ID of the payment method (a PaymentMethod, Card, or compatible Source
  // object) to attach to this PaymentIntent.
  string payment_method = 9;
  // Email address to send the receipt to. If you specify receipt_email for a
  // payment in live mode, you send a receipt regardless of your email settings.
  string receipt_email = 10;
  // Indicates that you intend to make future payments with this PaymentIntent’s
  // payment method.
  string setup_future_usage = 11;
  // Shipping information for this PaymentIntent.
  message Shipping {
    // Shipping address.
    string address = 1;
    // Recipient name.
    string name = 2;
    // The delivery service that shipped a physical product, such as Fedex, UPS,
    // USPS, etc.
    string carrier = 3;
    // Recipient phone (including extension).
    string phone = 4;
    // The tracking number for a physical product, obtained from the delivery
    // service. If multiple tracking numbers were generated for this purchase,
    // please separate them with commas.
    string tracking_number = 5;
  }
  Shipping shipping = 12;
  // For non-card charges, you can use this value as the complete description
  // that appears on your customers’ statements
  string statement_descriptor = 13;
  // Provides information about a card payment that customers see on their
  // statements
  string statement_descriptor_suffix = 14;
}

message GetPaymentIntentRequest {
  // Unique identifier for the object.
  string id = 1;
}

// The PaymentMethod object for errors returned on a request involving a
// PaymentMethod.
message PaymentMethod {
  // Unique identifier for the object.
  string id = 1;
  // String representing the object’s type. Objects of the same type share
  // the same value.
  string object = 2;

  // If this is an acss_debit PaymentMethod, this hash contains details
  // about the ACSS Debit payment method.
  message ACSSDebit {
    // Name of the bank associated with the bank account.
    string bank_name = 1;
    // Uniquely identifies this particular bank account. You can use this
    // attribute to check whether two bank accounts are the same.
    string fingerprint = 2;
    // Institution number of the bank account.
    string institution_number = 3;
    // Last four characters of the bank account number.
    string last4 = 4;
    // Transit number of the bank account.
    string transit_number = 5;
  }
  // If this is an au_becs_debit PaymentMethod, this hash contains details
  // about the bank account.
  message AuBecsDebit {
    // Six-digit number identifying bank and branch associated with this
    // bank account.
    string bsb_number = 1;
    // Uniquely identifies this particular bank account. You can use this
    // attribute to check whether two bank accounts are the same.
    string fingerprint = 2;
    // Last four characters of the bank account number.
    string last4 = 3;
  }
  // If this is a bacs_debit PaymentMethod, this hash contains details
  // about the Bacs Direct Debit bank account.
  message BacsDebit {
    // Uniquely identifies this particular bank account. You can use this
    // attribute to check whether two bank accounts are the same.
    string fingerprint = 1;
    // Last four characters of the bank account number.
    string last4 = 2;
    // Sort code of the bank account.
    string sort_code = 3;
  }
  message Card {
    enum Brand {
      CARD_BRAND_UNKNOWN = 0;
      amex = 1;
      diners = 2;
      discover = 3;
      eftpos_au = 4;
      jcb = 5;
      mastercard = 6;
      unionpay = 7;
      visa = 8;
    }
    // Card brand. Can be amex, diners, discover, eftpos_au, jcb,
    // mastercard, unionpay, visa, or unknown.
    Brand brand = 1;
    // Checks on Card address and CVC if provided.
    message Checks {
      string address_line1_check = 1;
      string address_postal_code_check = 2;
      string cvc_check = 3;
    }
    Checks checks = 2;

    // Two-letter ISO code representing the country of the card. You could
    // use this attribute to get a sense of the international breakdown of
    // cards you’ve collected.
    string country = 3;
    // Two-digit number representing the card’s expiration month.
    int32 exp_month = 4;
    // Four-digit number representing the card’s expiration year.
    int32 exp_year = 5;
    // Uniquely identifies this particular card number. You can use this
    // attribute to check whether two customers who’ve signed up with you
    // are using the same card number,for example.
    string fingerprint = 6;
    // Card funding type. Can be credit, debit, prepaid, or unknown.
    string funding = 7;
    //
  }

  oneof payment_method {
    ACSSDebit acss_debit = 3;
    // If this is an affirm PaymentMethod, this hash contains details about
    // the Affirm payment method.
    google.protobuf.Struct affirm = 4;
    // If this is an AfterpayClearpay PaymentMethod, this hash contains
    // details about the AfterpayClearpay payment method.
    google.protobuf.Struct afterpay_clearpay = 5;
    // If this is an alipay PaymentMethod, this hash contains details about
    // the Alipay payment method.
    google.protobuf.Struct alipay = 6;
    AuBecsDebit au_becs_debit = 7;
    BacsDebit bacs_debit = 8;
    // If this is a bancontact PaymentMethod, this hash contains details
    // about the Bancontact payment method.
    google.protobuf.Struct bancontact = 9;
    Card card = 14;
  }

  // Billing information associated with the PaymentMethod that may be used
  // or required by particular types of payment methods.
  message BillingDetails {
    // Billing address.
    message Address {
      // City, district, suburb, town, or village.
      string city = 1;
      // Two-letter country code (ISO 3166-1 alpha-2).
      string country = 2;
      // Address line 1 (e.g., street, PO Box, or company name).
      string line1 = 3;
      // Address line 2 (e.g., apartment, suite, unit, or building).
      string line2 = 4;
      // ZIP or postal code.
      string postal_code = 5;
      // State, county, province, or region.
      string state = 6;
    }
    Address address = 1;
    // Email address.
    string email = 2;
    // Full name.
    string name = 3;
    // Billing phone number (including extension).
    string phone = 4;
  }
  BillingDetails billing_details = 15;

  // The type of the PaymentMethod. An additional hash is included on the
  // PaymentMethod with a name matching this value. It contains additional
  // information specific to the PaymentMethod type.
  string type = 16;
}
